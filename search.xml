<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从FCN到MASK-RCNN到Mutinet</title>
      <link href="/2020/10/18/cong-fcn-dao-mask-rcnn-dao-mutinet/"/>
      <url>/2020/10/18/cong-fcn-dao-mask-rcnn-dao-mutinet/</url>
      
        <content type="html"><![CDATA[<h3 id="从FCN到Mask-RCNN到Multinet"><a href="#从FCN到Mask-RCNN到Multinet" class="headerlink" title="从FCN到Mask-RCNN到Multinet"></a>从FCN到Mask-RCNN到Multinet</h3><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PYQT5常用函数</title>
      <link href="/2020/10/16/pyqt5-chang-yong-han-shu/"/>
      <url>/2020/10/16/pyqt5-chang-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<h5 id="ui程序转化为py程序："><a href="#ui程序转化为py程序：" class="headerlink" title="ui程序转化为py程序："></a>ui程序转化为py程序：</h5><pre><code>pyuic5 -o xxx.py xxx.ui</code></pre><h5 id="python程序打包成exe"><a href="#python程序打包成exe" class="headerlink" title="python程序打包成exe:"></a>python程序打包成exe:</h5><pre><code>pyinstaller.exe -F xxx.py -w</code></pre><p>参数详解：</p><pre><code>-F，-onefile: 表示生成单个可执行文件，常用。-w, -windowed, -noconsole:表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！-p 表示你自己自定义需要加载的类路径，一般情况下用不到-i 表示可执行文件的图标。注意:图片后缀必须是.ico-c,console,-nowindowed:使用控制台，无窗口（默认）-D，-onedir：创建一个目录，包含EXE文件，但会依赖很多文件（默认选项）</code></pre><h5 id="信号与槽"><a href="#信号与槽" class="headerlink" title="信号与槽"></a>信号与槽</h5><pre><code>Clicked：鼠标左键点击按钮并释放触发该信号。最常用。记住这个就差不多够了。Pressed：鼠标左键按下时触发该信号Released：鼠标左键释放时触发该信号Toggled：控件标记状态发生改变时触发该信号。</code></pre><h5 id="QRadioButton单选按钮"><a href="#QRadioButton单选按钮" class="headerlink" title="QRadioButton单选按钮"></a>QRadioButton单选按钮</h5><pre class=" language-python"><code class="language-python">self<span class="token punctuation">.</span>radioButton<span class="token punctuation">.</span>isChecked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#用于判断RadioButton控件是否被选中。返回值True表示按钮被选中，False表示按钮未选中。</span></code></pre><h5 id="QCheckBox复选框"><a href="#QCheckBox复选框" class="headerlink" title="QCheckBox复选框"></a>QCheckBox复选框</h5><pre class=" language-python"><code class="language-python">self<span class="token punctuation">.</span>freshcheckBox<span class="token punctuation">.</span>isChecked<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>bearcheckBox<span class="token punctuation">.</span>isChecked<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#同样适用isChecked()函数判断。</span></code></pre><h5 id="QComboBox下拉列表框"><a href="#QComboBox下拉列表框" class="headerlink" title="QComboBox下拉列表框"></a>QComboBox下拉列表框</h5><pre class=" language-python"><code class="language-python">select_value <span class="token operator">=</span> self<span class="token punctuation">.</span>comboBox<span class="token punctuation">.</span>currentText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用currentText()函数获取下拉框中选择的值</span></code></pre><h5 id="文本框控件（QLineEdit、QTextEdit）"><a href="#文本框控件（QLineEdit、QTextEdit）" class="headerlink" title="文本框控件（QLineEdit、QTextEdit）"></a>文本框控件（QLineEdit、QTextEdit）</h5><ul><li><p><strong>单行文本框（QLineEdit）方法如下：</strong></p><p>setText()：设置单行文本框内容。</p><p>Text():返回文本框内容</p><p>clear()：清除文本框内容</p></li><li><p><strong>多行文本框（QTextEdit）方法如下：</strong></p><p>setPlainText()：设置多行文本框的文本内容。</p><p>toPlainText()：获取多行文本框的文本内容。</p><p>clear()：清除多行文本框的内容</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">set_display_edit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#设置前先清除文本内容</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#设置文本框内容</span>        self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"Lineedit contents"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setPlainText<span class="token punctuation">(</span><span class="token string">"Textedit contents"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取文本框内容，并弹框显示内容</span>        str1 <span class="token operator">=</span> self<span class="token punctuation">.</span>lineEdit<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>        str2 <span class="token operator">=</span> self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>toPlainText<span class="token punctuation">(</span><span class="token punctuation">)</span>        QMessageBox<span class="token punctuation">.</span>information<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"获取信息"</span><span class="token punctuation">,</span><span class="token string">"LineEdit文本框内容为:%s,TextEdit文本框内容为：%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="QMessageBox：弹出消息对话框控件"><a href="#QMessageBox：弹出消息对话框控件" class="headerlink" title="QMessageBox：弹出消息对话框控件"></a>QMessageBox：弹出消息对话框控件</h5><ul><li><strong>QMessageBox类中常用方法</strong></li></ul><pre class=" language-python"><code class="language-python">information<span class="token punctuation">(</span>QWdiget parent<span class="token punctuation">,</span>title<span class="token punctuation">,</span>text<span class="token punctuation">,</span>buttons<span class="token punctuation">,</span>defaultButton<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#弹出消息对话框。</span>question<span class="token punctuation">(</span>QWidget parent<span class="token punctuation">,</span>title<span class="token punctuation">,</span>text<span class="token punctuation">,</span>buttons<span class="token punctuation">,</span>defaultButton<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#弹出问答对话框</span><span class="token comment" spellcheck="true">#弹出警告对话框</span>critical<span class="token punctuation">(</span>QWidget parent<span class="token punctuation">,</span>title<span class="token punctuation">,</span>text<span class="token punctuation">,</span>buttons<span class="token punctuation">,</span>defaultButton<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#弹出严重错误对话框</span>about<span class="token punctuation">(</span>QWidget parent<span class="token punctuation">,</span>title<span class="token punctuation">,</span>text<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">#弹出关于对话</span></code></pre><ul><li><strong>参数解释如下：</strong></li></ul><pre class=" language-python"><code class="language-python">parent            <span class="token comment" spellcheck="true">#指定的父窗口控件。</span>title            <span class="token comment" spellcheck="true">#表示对话框标题。</span>text            <span class="token comment" spellcheck="true">#表示对话框文本。</span>buttons            <span class="token comment" spellcheck="true">#表示多个标准按钮，默认为ok按钮。</span>defaultButton    <span class="token comment" spellcheck="true">#表示默认选中的标准按钮，默认选中第一个标准按钮。</span></code></pre><ul><li><strong>其他方法如下：</strong></li></ul><pre class=" language-python"><code class="language-python">setTitle<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#设置标题</span>setText<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#设置正文消息</span>setIcon<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#设置弹出对话框的图片</span></code></pre><ul><li><strong>QMessageBox的标准按钮类型</strong></li></ul><pre class=" language-python"><code class="language-python">QMessage<span class="token punctuation">.</span>Ok         <span class="token comment" spellcheck="true">#同意</span>QMessage<span class="token punctuation">.</span>Cancel      <span class="token comment" spellcheck="true">#取消操作</span>QMessage<span class="token punctuation">.</span>Yes         <span class="token comment" spellcheck="true">#同意操作</span>QMessage<span class="token punctuation">.</span>No          <span class="token comment" spellcheck="true">#取消操作</span>QMessage<span class="token punctuation">.</span>Abort      <span class="token comment" spellcheck="true">#终止操作</span>QMessage<span class="token punctuation">.</span>Retry         <span class="token comment" spellcheck="true">#重试操作</span>QMessage<span class="token punctuation">.</span>Ignore      <span class="token comment" spellcheck="true">#忽略操作</span></code></pre><h5 id="QInputDialog标准对话框控件"><a href="#QInputDialog标准对话框控件" class="headerlink" title="QInputDialog标准对话框控件"></a>QInputDialog标准对话框控件</h5><ul><li><strong>QInputDialog常用方法</strong></li></ul><pre class=" language-python"><code class="language-python">getint<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#从输入控件中获得标准整数输入</span>getDouble<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#从输入控件中获得标准浮点数输入</span>getText<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#从输入控件中获得标准字符串的输入</span>getItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#从输入控件中获得列表里的选项输入</span></code></pre><ul><li><strong>关键代码介绍：</strong></li></ul><pre class=" language-python"><code class="language-python">QInputDialog<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'Integer input dialog'</span><span class="token punctuation">,</span> <span class="token string">'输入数字'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#输入整数对话框</span>QInputDialog<span class="token punctuation">.</span>getText<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">'Text Input Dialog'</span><span class="token punctuation">,</span> <span class="token string">'输入姓名：'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#输入字符串对话框</span>QInputDialog<span class="token punctuation">.</span>getItem<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"select input dialog"</span><span class="token punctuation">,</span> <span class="token string">'语言列表'</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#下拉列表选择对话框</span></code></pre><h5 id="QFileDialog-文件-目录选择对话框"><a href="#QFileDialog-文件-目录选择对话框" class="headerlink" title="QFileDialog 文件/目录选择对话框"></a>QFileDialog 文件/目录选择对话框</h5><ul><li><strong>QFileDialog控件实现的主要方法</strong>：</li></ul><pre class=" language-python"><code class="language-python">QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取单个文件路径</span>QFileDialog<span class="token punctuation">.</span>getOpenFileNames<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取多个文件路径</span>QFileDialog<span class="token punctuation">.</span>getExistingDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取文件夹路径</span></code></pre><ul><li><strong>关键代码介绍</strong></li></ul><pre class=" language-python"><code class="language-python">QFileDialog<span class="token punctuation">.</span>getOpenFileName<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"选取单个文件"</span><span class="token punctuation">,</span><span class="token string">"C:/"</span><span class="token punctuation">,</span><span class="token string">"All Files (*);;Text Files (*.txt)"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取单个指定文件的绝对路径</span></code></pre><ul><li><strong>getOpenFileName()参数说明：</strong></li></ul><pre><code>第1个参数：用于指定父组件第2个参数：对话框标题第3个参数：对话框显示时默认打开的目录。&quot;.&quot;表示当前程序所在目录，“/”表示当前盘下的根目录。第4个参数：对话框中文件扩展名过滤器。All Files (*);;Text Files (*.txt)表示可以选择所有文件类型或者只显示.txt后缀的文件类型。</code></pre><pre class=" language-python"><code class="language-python">QFileDialog<span class="token punctuation">.</span>getExistingDirectory<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">"选取指定文件夹"</span><span class="token punctuation">,</span><span class="token string">"C:/"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#获取指定文件夹的绝对路径QFileDialog.getOpenFileNames(self,"选取多个文件","C:/","All Files (*);;Text Files (*.txt)") #获取多个指定文件的绝对路径</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>All You Need Is Boundary</title>
      <link href="/2020/10/09/all-you-need-is-boundary/"/>
      <url>/2020/10/09/all-you-need-is-boundary/</url>
      
        <content type="html"><![CDATA[<h3 id="All-You-Need-Is-Boundary-Toward-Arbitrary-Shaped-Text-Spotting"><a href="#All-You-Need-Is-Boundary-Toward-Arbitrary-Shaped-Text-Spotting" class="headerlink" title="All You Need Is Boundary: Toward Arbitrary-Shaped Text Spotting"></a>All You Need Is Boundary: Toward Arbitrary-Shaped Text Spotting</h3><hr><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>端到端的文本定位</p><p>以往方法：边界框提取或者实例分割</p><p>我们方法：在每个文本实例边界上定位一组点    简单有效的方法    可以读取任何形状的文本（将文本区域转化为水平区域）</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-09 143336.png)</p><p>场景文本识别&amp;端到端识别任务SOTA</p><hr><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>过去，场景文本检测和定位被视作两个独立的子任务   实际高度相关互补的</p><p>最近的端到端文本定位方法：结合检测和识别任务到一个端到端的网络中</p><p>相似的pipeline:文本的边界框先被识别   然后边界框中的图像patch或者卷积特征喂如序列识别模型</p><p>卷积共享和联合训练–&gt;两个任务性能提升</p><p>大多数现有定位方法处理不规则文本区域的时候比较挣扎，因为矩形检测框在处理不规则文本的时候或多或少会框入一部分背景信息（见图1），这给识别带来难度</p><p>最近的一个基于MASK-RCNN的端到端OCR模型      实例分割</p><p>缺点：字符级注释   计算量加大</p><p>我们的方法：</p><p>端对端模型  无需字符级注释   不通过矩形框，而是定位边界完成检测   描述各种形状的文本更加灵活</p><p>优点：</p><ul><li>准确获取不规则文本区域的CNN特征，有效消除背景噪声对识别的影响、</li><li>不规则文本可转化为规则文本（如上图），这一操作在CNN中容易实现且可微</li><li>识别模型训练中边界点可细化  ？</li></ul><p>有效桥接了检测和识别阶段</p><p>直接预测文本边界点比较困难（由于文本形状和尺度），采取先粗后细的策略，先利用两级CNN（FPN+RPN）提取一个文本的有向矩形框，在有向矩形框中预测边界点</p><p>贡献：</p><ul><li>为端到端文本定位提出了边界点方法，它比边界框和分割掩码更适合桥接检测和识别模型</li><li>设计了一个基于边界点的端到端的可训练模型，可识别任意形状的文本</li></ul><hr><h4 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h4><p>文本定位大致分为两种方法：基于矩形框    基于分割</p><p>基于分割：需要字符级注释，且忽略上下文信息，影响识别性能</p><hr><h4 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h4><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-09 161032.png)</p><p>pipeline由三部分组成：</p><ul><li><p>有向矩形域检测器</p><p>FPN+RPN    产生水平文本区域建议，然后预测中心点、高度、宽度和方向生成一个有向矩形检测器</p></li><li><p>边界点检测网络</p><p>边界点检测网络(BPDN)回归每个有向矩形框的边界点</p></li><li><p>识别网络</p><p>利用生成的边界点修正特征图用于后续文本识别</p></li></ul><p>对区域建议直接用BPDN做边界点预测，效果一般（背景噪声较多，变形更强）</p><p>为解决这一问题，对每个方案预测一个有向矩形框，利用RotatedRoIAlign将特征图转化为水平</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-09 213646.png)</p><ul><li>从RPN的轴对齐框回归到有向矩形框</li><li>转化为水平</li><li>从一组均匀分布在最小矩形框上下两侧的默认点回归到边界点</li><li>对齐边界点到原始图像</li></ul><h5 id="Boundary-Point-Detection-Network"><a href="#Boundary-Point-Detection-Network" class="headerlink" title="Boundary Point Detection Network"></a>Boundary Point Detection Network</h5><p>4个3*3卷积层+1个全连接层</p><p>预定义一组边界点（每条边等距采样K个点），然后预测偏移量（4K维向量）</p><p>$2k*(\triangle x,\triangle y)$</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-09 220149.png)</p><p>$w_0,h_0$是最小矩形框的宽和长</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 150126.png)</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 150321.png)</p><p>Arbitrary ROIAlign使任意形状的文本实例变平</p><p>具体：给定边界点   Thin-Plate-Spline transformation</p><h5 id="Recognition-Network"><a href="#Recognition-Network" class="headerlink" title="Recognition Network"></a>Recognition Network</h5><p>识别网络通常是基于attention的序列to序列网络</p><p>网络结构：</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 151339.png)</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 153640.png)</p><p>![屏幕截图 2020-10-10 153706](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 153706.png)</p><p>![屏幕截图 2020-10-10 153727](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 153727.png)</p><h5 id="Loss-Functions"><a href="#Loss-Functions" class="headerlink" title="Loss Functions"></a>Loss Functions</h5><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 154415.png)</p><p>$L_{rpn}$:loss of RPN</p><p>$L_{or}$:loss of 回归有向矩形框</p><p>$L_{bp}$:边界点回归损失</p><p>$L_{recog}$：识别损失</p><p>![](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 154816.png)</p><p>![屏幕截图 2020-10-10 154838](All-You-Need-Is-Boundary/屏幕截图 2020-10-10 154838.png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zero-shot Recognition via Semantic Embeddings and Knowledge Graphs</title>
      <link href="/2020/09/30/zero-shot-recognition-via-semantic-embeddings-and-knowledge-graphs/"/>
      <url>/2020/09/30/zero-shot-recognition-via-semantic-embeddings-and-knowledge-graphs/</url>
      
        <content type="html"><![CDATA[<h3 id="Zero-shot-Recognition-via-Semantic-Embeddings-and-Knowledge-Graphs"><a href="#Zero-shot-Recognition-via-Semantic-Embeddings-and-Knowledge-Graphs" class="headerlink" title="Zero-shot Recognition via Semantic Embeddings and Knowledge Graphs"></a>Zero-shot Recognition via Semantic Embeddings and Knowledge Graphs</h3><hr><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>zero-shot recognition问题：没有训练样本的物体类别识别（仅仅给定类别的word embedding以及与其他有训练数据的类别的联系）</p><p>关键点：迁移从熟悉类（有训练数据）获得的知识到非熟悉类（zero-shot）</p><p>文章方法：基于GCN提出一种使用semantic embedding和绝对关系来构建分类器，给定一个学习好的知识图谱，我们为每个结点（类）输入semantic embedding，经过一系列图卷积，为每个类训练分类器。使用少部分类别训练GCN的参数，并测试未训练类别。</p><hr><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>当前的识别算法只能识别它们训练过的类别，添加新类别需要增加大量训练数据，然后retrain</p><p>引入zero-shot学习：</p><p>关键：泛化–迁移从熟悉类（有训练数据）获得的知识到非熟悉类（zero-shot）</p><p>两个范例：</p><ul><li><p>semantic embedding（隐性知识）：基于文本数据学习向量表示，然后直接学习一个向量表示到视觉分类器之间的映射</p><p>缺点：语义模型与映射模型本身泛化能力限制，难以从结构化知识中学习semantic embedding</p></li><li><p>知识图谱（显性知识）：显式地将知识表示为不同对象之间的规则或关系，再利用这些关系来训练zero-shot分类器，想探究是否可以使用结构化的信息和复杂的关系来学习zero-shot视觉分类器</p></li></ul><p>我们的方法：隐性知识和显性知识相结合，建立一个知识图谱，每个结点对应一个语言类别（每个结点的输入是每个类的向量表示（semantic embedding）），结点通过关系边连接起来。建立一个6层的GCN在不同类别间传递信息，并输出各类别的分类器。</p><p>效果：针对SOTA方法会有一定的提升，而且我们的方法具有尺度性，当我们增大知识图谱规模时，即使图谱是有噪声的，分类性能也会有显著提升。</p><hr><h4 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h4><p>zero-shot识别和文本到视觉分类器的映射问题越来越有趣。</p><p>zero-shot早期工作：</p><ul><li><p>使用属性向量来表示一个类别有没有某个属性，然后映射这个向量来学习视觉分类器。</p></li><li><p>也有人不手动定义属性-类关系，而是从互联网资源挖掘关联</p></li><li><p>使用属性作为边信息来学习语义嵌入</p></li></ul><p>随着深度学习的发展，两大方法：</p><ul><li>semantic embedding，核心思想：使用可以映射成视觉分类器的向量表示类别两个不同的网络</li></ul><p>无监督为图像和语言训练两个网络，然后学习一个图像表示和词embedding之间的映射</p><p>DeVISE:使用一个卷积神经网络和一个转换层，使用预测embedding做最近邻搜索，可以拓展zero-shot识别到数以千计类。</p><p>ConSE:结合已有的图像分类网络和词embedding模型构造图像embedding模型</p><p>Changpinyo et al [4] proposed an approach<br>to align semantic and visual manifolds via use of ‘phantom’<br>classes.（不是很懂）</p><p>缺点：没有使用类之间任何的显式关系</p><ul><li>知识图谱</li></ul><p>WordNet:不同类之间共享表征，训练样本较少的类可以从相关类借鉴</p><p>建模不同类之间的互斥现象，对损失函数进行约束（比如物体不可能同时是猫狗）</p><p>通过在图中添加对象-属性关系针对Zero-shot问题</p><p>与这些使用图作为约束的方法相比，我们的方法使用图直接生成新的对象分类器</p><hr><h4 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h4><h5 id="GCN"><a href="#GCN" class="headerlink" title="GCN"></a>GCN</h5><p>引入GCN做半监督实体分类</p><p>给定目标实体（使用word embedding或者文本特征表示）然后做分类任务（猫、狗-&gt;哺乳动物   椅子、沙发-&gt;家具），我们也假设这样一个节点代表实体、边代表实体间关系的图</p><p>数据集：$(X,Y) = {(x_i,y_i)}^n_{i=1}$</p><p>$x_i$：实体i的word embedding        $y_i\in {1,…,C}$：标签</p><p>半监督学习：知道m个实体的标签，推理剩下的n-m个实体</p><p>$F(.)$：GCN     输入：所有的实例的word embedding X   输出：所有实例的分类结果</p><p>loss: $\frac{1}{m}sum_{i = 0}^mL_{softmax}(F_i(X),y_i)$</p><p>loss反向传播训练GCN参数</p><h6 id="GCN卷积"><a href="#GCN卷积" class="headerlink" title="GCN卷积"></a>GCN卷积</h6><p>每一层的卷积：</p><p>$Z=\hat{A}\hat{X}W$</p><p>$\hat{A}$：归一化的二进制邻接矩阵    $n\times n$</p><p>$\hat{X}$:  前一层的特征矩阵     $n\times k$</p><p>$W$:  每一层的权重矩阵    $k\times c$</p><p>该卷积操作可堆叠，每一个卷积层后接Relu层</p><hr><h5 id="GCN-for-Zeroshot-Learning"><a href="#GCN-for-Zeroshot-Learning" class="headerlink" title="GCN for Zeroshot Learning"></a>GCN for Zeroshot Learning</h5><p>输入： 类集和它们对应的对应的semantic-embedding向量（$X = {x_i}^n_{i=1}$）  维度$n\times k$,k是embedding维度</p><p>输出： 每一类的视觉分类器$W={w_i}^n_{i=1}$     维度：$n\times D$，D是视觉特征维度</p><p>zero-shot设定中：对前m类有足够的样本去估计weight vector，再对剩下的n-m个类，以它们的embedding vector为输入去估计它们对应的weight vector</p><p>训练样本少，我们希望利用视觉世界的显式结构和它们之间的关系来约束这个问题</p><p>这种关系用知识图谱来表征，每个结点代表一个语义类别，如果两个类别有关系通过一条边来连接，邻接矩阵$n\times n$,且是无向图，对称邻接矩阵。</p><h6 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss-function"></a>Loss-function</h6><p>$\frac{1}{m}sum_{i = 0}^mL_{mse}(\hat{w}_i,w_i)$            $w_i$怎么来的</p><p>在训练过程中，我们使用m类的损失来估计GCN的参数。利用估计的参数，我们得到zero-shot类别的分类器权值。在测试时，首先通过预训练的卷积神经网络提取图像的特征表示，然后使用生成的分类器对提取的特征进行分类</p><hr><h5 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h5><p>6层（深度很重要）</p><p>channnel:2048 -&gt;2048 -&gt;1024-&gt;1024-&gt;512 -&gt; D</p><p>激活函数：LeakyReLU    negative slope=0.2   更快收敛</p><p>训练和测试时：对网络输出结果均使用L2-Normalization，使所有分类器的权值量级相似</p><p>GCC的输入embedding:GloVe text model    Wikipedia数据集    300-d向量</p><p>多词名：平均embedding</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多功能数字钟的FPGA实现</title>
      <link href="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/"/>
      <url>/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="多功能数字钟的FPGA设计与实现"><a href="#多功能数字钟的FPGA设计与实现" class="headerlink" title="多功能数字钟的FPGA设计与实现"></a>多功能数字钟的<code>FPGA</code>设计与实现</h3><hr><p>姓名：吴栋</p><p>班级：电信1803</p><p>学号：U201813381</p><p>合作者：吴雨暄</p><hr><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><ol><li>熟悉并掌握利用<code>Verilog</code>建模描述具体数字电路的方法</li><li>熟悉<code>FPGA</code>开发流程，<code>Vivado</code>软件的使用和<code>Nexys 4DDR</code>开发板的应用</li><li>了解数字钟的功能要求及设计方法</li></ol><hr><h4 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h4><ol><li>完成多功能数字钟的总体设计和模块划分</li><li>在<code>Vivado</code>平台上完成多功能数字钟的<code>Verilog</code>代码开发，以及编写引脚约束的代码文件</li><li>生成<code>bitstream</code>并下载 到<code>Nexys 4DDR</code>开发板上，调试功能</li></ol><hr><h4 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h4><ol><li>准确计时，利用七段数码管以数字形式显示时、分、秒的时间，且可以切换小时显示（12/24）模式，24小时计时规律为0-1-2-…-23,12小时计时规律为12-01-02-…-11，且12小时制时有对应的标志位用以区分上下午。</li><li>可以手动校时、校分、校秒。</li><li>可以设置闹钟，闹钟时间精确到分钟，并且闹钟响应期间可以手动关闭。</li><li>具有秒表功能，计时精度为<code>10ms</code>，支持手动复位和暂停/继续。</li><li>具有基于12小时制的整点报时功能。</li></ol><hr><h4 id="实验设计方案"><a href="#实验设计方案" class="headerlink" title="实验设计方案"></a>实验设计方案</h4><h5 id="模式设计和模块划分"><a href="#模式设计和模块划分" class="headerlink" title="模式设计和模块划分"></a>模式设计和模块划分</h5><p>基于实验要求，我们为数字钟划分了4种工作模式，分别是常规显示模式、调时模式、设定闹钟模式、秒表模式。我们选用两位开关<code>sw0</code>、<code>sw1</code>切换工作模式：</p><ul><li><code>sw0</code>=0 <code>sw1</code>=0 : 常规显示模式</li><li><code>sw0</code>=0 <code>sw</code>=1 : 调时模式</li><li><code>sw0</code>=1 <code>sw</code>=0 : 设定闹钟模式</li><li><code>sw0</code>=1 <code>sw</code>=1: 秒表模式</li></ul><hr><h6 id="常规显示模式"><a href="#常规显示模式" class="headerlink" title="常规显示模式"></a>常规显示模式</h6><p>当数字钟处于常规显示模式时，数字钟能准确计时，并利用七段数码管显示当前时、分、秒时间。</p><p>且我们选用开关<code>sw15</code>作为小时显示（<code>12/24</code>）模式的控制开关，开关闭合时为12小时制，反之为24小时制，当显示模式为12小时制时，我们通过最高位的数码管显示A、P区分上下午，当显示模式为24小时制时，最高位数码管为常熄，显示模式是可以任意切换的。</p><p>当时间到达我们设定的闹钟时间时，通过时间显示数码管的闪烁代表闹铃的响起，我们可以通过<code>BTNC</code>按键手动关闭闹铃，也可以等待一分钟，闹铃会自动关闭。</p><p>当时间到达整点时，我们通过两位<code>RGB LED</code>的三种颜色轮番闪烁区分上下午，其中<code>LD16</code>闪烁时代表上午，<code>LD17</code>闪烁时代表下午，并利用12位<code>LED</code>灯的长明区分具体小时，整点报时功能只持续6秒，6秒时间一过，普通<code>LED</code>和<code>RGB LED</code>都全部熄灭。</p><p>显示时间可以通过调时模式进行校正，闹钟时间可以通过设定闹钟模式进行设定。</p><hr><h6 id="调时模式"><a href="#调时模式" class="headerlink" title="调时模式"></a>调时模式</h6><p>调时模式为我们的数字钟校正计时时间，当数字钟的工作模式切换到调时模式时，利用七段数码管的前两位显示AL，表明当前工作模式为调时模式，我们将常规显示模式的当前时间进行传入，在当前时间的基础上进行调时，为尽可能提高调时效率，我们可以直接对秒个/时位、分个/时位、小时位进行调试，我们通过对应位闪烁表明该位位当前调时位，通过<code>BTNL</code>、<code>BTNR</code>按键左右滑动选择调时位，通过<code>BTNU</code>、<code>BTND</code>按键进行增减调动，且调时时，我们也可以任意切换选择我们喜欢的显示（<code>12/24</code>）模式，调时完毕后，我们通过按下<code>BTNC</code>按键就可以用调好的时间去校正常规显示模块的显示计时时间了。</p><hr><h6 id="设定闹钟模式"><a href="#设定闹钟模式" class="headerlink" title="设定闹钟模式"></a>设定闹钟模式</h6><p>设定模式为我们的数字钟设定闹钟时间，当数字钟的工作模式切换到设定闹钟模式，我们可以在上次设定的闹钟时间的基础进行调时，类似调时模式，通过对应位闪烁表明该位位当前调时位，可以通过<code>BTNL</code>、<code>BTNR</code>按键左右滑动选择调时位，通过<code>BTNU</code>、<code>BTND</code>按键进行增减调动，也可以任意切换我们喜欢的显示（<code>12/24</code>）模式，不过我们闹钟时间是精确到分钟的，所以我们调时位只有小时位、分个/十位，当我们从设定闹钟模式切换到数字钟其他工作模式时，设定好的闹钟时间就已经自动更新了。</p><hr><h6 id="秒表模式"><a href="#秒表模式" class="headerlink" title="秒表模式"></a>秒表模式</h6><p>秒表模式提供<code>10ms</code>精度的计时功能，计时时间范围为<code>00:00:00</code>到<code>59:59:99</code>,我们通过<code>BTNC</code>按键启动 /暂停/继续计时，通过<code>BTND</code>按键清零复位。</p><hr><h6 id="顶层结构设计"><a href="#顶层结构设计" class="headerlink" title="顶层结构设计"></a>顶层结构设计</h6><p>基于各模式间的耦合关系，由于常规显示模块的显示时间和闹钟时间需要调试模块和设定闹钟模式校正设定，调时模式也需要将常规显示模块的当前时间进行传入，而秒表模式相对独立，所以我们在上层模块设定这样的引用关系：</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/%E7%BB%98%E5%9B%BE2.png" alt></p><hr><h5 id="模块具体设计"><a href="#模块具体设计" class="headerlink" title="模块具体设计"></a>模块具体设计</h5><h6 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h6><p>为便于代码的阅读性，我们封装了头文件<code>para.v</code>：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`define</span> segcode_0 <span class="token number">7'b1000000</span><span class="token constant">`define</span> segcode_1 <span class="token number">7'b1111001</span><span class="token constant">`define</span> segcode_2 <span class="token number">7'b0100100</span><span class="token constant">`define</span> segcode_3 <span class="token number">7'b0110000</span><span class="token constant">`define</span> segcode_4 <span class="token number">7'b0011001</span><span class="token constant">`define</span> segcode_5 <span class="token number">7'b0010010</span><span class="token constant">`define</span> segcode_6 <span class="token number">7'b0000010</span><span class="token constant">`define</span> segcode_7 <span class="token number">7'b1111000</span><span class="token constant">`define</span> segcode_8 <span class="token number">7'b0000000</span><span class="token constant">`define</span> segcode_9 <span class="token number">7'b0010000</span><span class="token constant">`define</span> segcode_A <span class="token number">7'b0001000</span><span class="token constant">`define</span> segcode_P <span class="token number">7'b0001100</span><span class="token constant">`define</span> segcode_L <span class="token number">7'b1000111</span><span class="token constant">`define</span> segcode_None <span class="token number">7'b1111111</span><span class="token constant">`define</span> poscode_None <span class="token number">8'b11111111</span><span class="token constant">`define</span> poscode_1 <span class="token number">8'b11111110</span><span class="token constant">`define</span> poscode_2 <span class="token number">8'b11111101</span><span class="token constant">`define</span> poscode_3 <span class="token number">8'b11111011</span><span class="token constant">`define</span> poscode_4 <span class="token number">8'b11110111</span><span class="token constant">`define</span> poscode_5 <span class="token number">8'b11101111</span><span class="token constant">`define</span> poscode_6 <span class="token number">8'b11011111</span><span class="token constant">`define</span> poscode_7 <span class="token number">8'b10111111</span><span class="token constant">`define</span> poscode_8 <span class="token number">8'b011111111</span><span class="token constant">`define</span> mode_display <span class="token number">2'b00</span><span class="token constant">`define</span> mode_timer <span class="token number">2'b01</span><span class="token constant">`define</span> mode_alarm <span class="token number">2'b10</span><span class="token constant">`define</span> mode_melody <span class="token number">2'b11</span><span class="token constant">`define</span> Mode_24 <span class="token number">1'b0</span><span class="token constant">`define</span> Mode_12 <span class="token number">1'b1</span></code></pre><hr><h6 id="子功能模块"><a href="#子功能模块" class="headerlink" title="子功能模块"></a>子功能模块</h6><p>我们定义了以下的几个子模块，供我们的模式模块进行调用：</p><p><strong>秒表频率发生器</strong></p><p>秒表计时需产生周期为10ms频率为100HZ的时钟，此外还需满足秒表能够暂停/继续的功能。故而该模块主要功能为通过计数器对Nexys 4DDR开发板上的100MHZ频率分频，产生100HZ的扫描频率。在此基础上，增加一标志位stop，检测暂停按键上升沿改变stop的状态，对stop进行翻转。在计数器中增加一次判断，只有当stop为1时才计数，否则保持，从而停止秒表时钟的产生，以达到暂停的效果。当按下暂停按键时，stop翻转为0，计时停止；再次按下暂停按键后,stop重新翻转为1，继续计时。</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">timediv</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk_100m<span class="token punctuation">,</span>    <span class="token keyword">input</span> timer_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> pause<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> clk_out    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> count_div<span class="token punctuation">;</span>        <span class="token keyword">parameter</span> clk_freq <span class="token operator">=</span> <span class="token number">100000000</span>    <span class="token comment" spellcheck="true">//原时钟频率</span>    <span class="token keyword">parameter</span>  out_freq<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出频率</span>    <span class="token keyword">reg</span> stop<span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>    clk_out <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    count_div <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stop <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> pause<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>timer_EN<span class="token punctuation">)</span>            stop <span class="token operator">&lt;=</span> <span class="token operator">~</span>stop<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//计数翻转</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_100m<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span> stop<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> timer_EN<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>count_div<span class="token operator">&lt;</span><span class="token punctuation">(</span>clk_freq<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>out_freq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                count_div <span class="token operator">&lt;=</span> count_div <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">begin</span>                count_div <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                clk_out <span class="token operator">&lt;=</span> <span class="token operator">~</span>clk_out<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><p><strong>秒表计数器</strong></p><p>秒表显示共有6位，计时范围为00:00:00至59:59:99低3位与第5位为0到9计数模十，第4位与最高位为0~5计数模六，且需要实现复位的功能。故而该模块功能为同步可变模长计数以及异步清零。将6个计数器进行级联，其中每个计数器的计数使能信号由前级计数使能信号和前级是否达到最高位（5或者9）的信号相与获得。当清零信号有效时，所有计数器异步清零实现秒表的复位功能。</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">tmicnt</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> timer_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mod<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>    <span class="token keyword">input</span> en<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Q    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        Q <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//置零</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>timer_EN<span class="token punctuation">)</span>                Q<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">~</span>en<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//保持</span>            Q <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span>        <span class="token keyword">else</span>    <span class="token comment" spellcheck="true">//计数</span>            Q <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>Q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><p><strong>共阳数码管译码器</strong></p><p><code>digital_tube</code>模块将输入的数值对应译成共阳型数码管的段码。</p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">digital_tube</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dec<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> segcode    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>dec<span class="token punctuation">)</span>            <span class="token number">4'd0</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_0</span><span class="token punctuation">;</span>            <span class="token number">4'd1</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_1</span><span class="token punctuation">;</span>            <span class="token number">4'd2</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_2</span><span class="token punctuation">;</span>            <span class="token number">4'd3</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_3</span><span class="token punctuation">;</span>            <span class="token number">4'd4</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_4</span><span class="token punctuation">;</span>            <span class="token number">4'd5</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_5</span><span class="token punctuation">;</span>            <span class="token number">4'd6</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_6</span><span class="token punctuation">;</span>            <span class="token number">4'd7</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_7</span><span class="token punctuation">;</span>            <span class="token number">4'd8</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_8</span><span class="token punctuation">;</span>            <span class="token number">4'd9</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span> <span class="token constant">`segcode_9</span><span class="token punctuation">;</span>            <span class="token number">4'd10</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span><span class="token constant">`segcode_A</span><span class="token punctuation">;</span>            <span class="token number">4'd11</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span><span class="token constant">`segcode_P</span><span class="token punctuation">;</span>            <span class="token number">4'd12</span><span class="token punctuation">:</span>segcode<span class="token operator">&lt;=</span><span class="token constant">`segcode_None</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><p><strong>秒脉冲发生器</strong></p><ul><li><strong>分频器</strong>，将开发板上100MHZ的时钟分频形成秒脉冲时钟用以同步计数</li></ul><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">divider_100hz</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk_100m<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> clk_out    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> count_div<span class="token punctuation">;</span>    <span class="token keyword">parameter</span> clk_freq <span class="token operator">=</span> <span class="token number">100000000</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span>  out_freq<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>    clk_out <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>    count_div <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_100m<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>count_div<span class="token operator">&lt;</span><span class="token punctuation">(</span>clk_freq<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>out_freq<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            count_div <span class="token operator">&lt;=</span> count_div <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            count_div <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            clk_out <span class="token operator">&lt;=</span> <span class="token operator">~</span>clk_out<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><ul><li><strong>计数器(分/秒)</strong>，采用同步计数，异步置数模式，当检测到confirm按键按下时，如果处于调时模块，就将设置的时间值赋给计数器，其余时间在秒脉冲作用下正常计数</li></ul><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">count_6</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>en<span class="token punctuation">,</span>    <span class="token keyword">input</span> select_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> confirm<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> set<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Q    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        Q <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> confirm<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>confirm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//如果confirm按键按下，则将调试模块设置时间赋给计数器</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>select_EN<span class="token punctuation">)</span>                Q<span class="token operator">&lt;=</span>set<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">~</span>en<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//保持</span>            Q <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span>        <span class="token keyword">else</span>            Q <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>Q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">6</span>    <span class="token comment" spellcheck="true">//计数</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><ul><li>计数器(小时)**，同样是同步计数，异步置数。在按下confirm后若当前处于调时模块则将设置的小时值赋给计数器，不同的是在置数后需要统一将24/12进制的小时数统一转化为24小时进制数，在正常计数时统一采用24小时进制计数，输出时再根据当前的显示模式进行进制换算，由24小时制转换成24/12小时制</li></ul><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">count_Hour</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>en<span class="token punctuation">,</span>    <span class="token keyword">input</span> Mode<span class="token punctuation">,</span>    <span class="token keyword">input</span> select_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> confirm<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> H_set<span class="token punctuation">,</span>L_set<span class="token punctuation">,</span>Mode_tag_set<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> CntH<span class="token punctuation">,</span>CntL<span class="token punctuation">,</span>Mode_tag    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> CntH_temp<span class="token punctuation">,</span>CntL_temp<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">parameter</span> ten<span class="token operator">=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Cnt<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> confirm<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token comment" spellcheck="true">//现将12/24进制数时间统一按规矩转化为24进制数</span>        <span class="token function">if</span><span class="token punctuation">(</span>confirm<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>select_EN<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                CntH_temp <span class="token operator">=</span> H_set<span class="token punctuation">;</span>                CntL_temp <span class="token operator">=</span> L_set<span class="token punctuation">;</span>                tmp <span class="token operator">=</span> CntH_temp <span class="token operator">*</span> ten <span class="token operator">+</span> CntL_temp<span class="token punctuation">;</span>                <span class="token function">if</span><span class="token punctuation">(</span>Mode_tag_set <span class="token operator">==</span> <span class="token number">4'd11</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">5'd12</span><span class="token punctuation">)</span>                    <span class="token keyword">begin</span>                         CntH_temp <span class="token operator">&lt;=</span> <span class="token number">4'd1</span><span class="token punctuation">;</span>                         CntL_temp <span class="token operator">&lt;=</span> <span class="token number">4'd2</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span>                    <span class="token keyword">begin</span>                         CntH_temp <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token operator">-</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">)</span><span class="token operator">/</span>ten<span class="token punctuation">;</span>                         CntL_temp <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">;</span>                    <span class="token keyword">end</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>Mode_tag_set <span class="token operator">==</span> <span class="token number">4'd10</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">5'd12</span><span class="token punctuation">)</span>                    <span class="token keyword">begin</span>                         CntH_temp <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>                         CntL_temp <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>        <span class="token comment" spellcheck="true">//保持</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">~</span>en<span class="token punctuation">)</span>            <span class="token operator">{</span>CntH_temp<span class="token punctuation">,</span>CntL_temp<span class="token operator">}</span> <span class="token operator">&lt;=</span> <span class="token operator">{</span>CntH_temp<span class="token punctuation">,</span>CntL_temp<span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计数</span>        <span class="token keyword">else</span>            <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CntH_temp<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>CntL_temp<span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CntH_temp<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>CntL_temp<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">{</span>CntH_temp<span class="token punctuation">,</span>CntL_temp<span class="token operator">}</span> <span class="token operator">&lt;=</span> <span class="token number">8'h00</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CntH_temp<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>CntL_temp<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">begin</span>   CntH_temp<span class="token operator">&lt;=</span>CntH_temp<span class="token punctuation">;</span> CntL_temp<span class="token operator">&lt;=</span>CntL_temp<span class="token operator">+</span><span class="token number">1'b1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>CntL_temp<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span>                 <span class="token keyword">begin</span> CntH_temp<span class="token operator">&lt;=</span>CntH_temp<span class="token operator">+</span><span class="token number">1'b1</span><span class="token punctuation">;</span>  CntL_temp<span class="token operator">&lt;=</span><span class="token number">4'b0000</span><span class="token punctuation">;</span>  <span class="token keyword">end</span>     <span class="token comment" spellcheck="true">//小时十位的计数</span>            <span class="token keyword">else</span>                 <span class="token keyword">begin</span> CntH_temp<span class="token operator">&lt;=</span>CntH_temp<span class="token punctuation">;</span>   CntL_temp<span class="token operator">&lt;=</span>CntL_temp<span class="token operator">+</span><span class="token number">1'b1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//将小时数、上下午标志转化为要求的输出模式</span>    <span class="token important">always@</span><span class="token punctuation">(</span>CntH_temp <span class="token keyword">or</span> CntL_temp <span class="token keyword">or</span> Mode<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>Mode<span class="token operator">==</span><span class="token constant">`Mode_24</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>            CntH<span class="token operator">&lt;=</span>CntH_temp<span class="token punctuation">;</span>            CntL<span class="token operator">&lt;=</span>CntL_temp<span class="token punctuation">;</span>            Mode_tag<span class="token operator">&lt;=</span><span class="token number">4'd12</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>            Cnt <span class="token operator">=</span> CntH_temp <span class="token operator">*</span> ten<span class="token operator">+</span>CntL_temp<span class="token punctuation">;</span>            <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Cnt<span class="token operator">>=</span><span class="token number">5'd1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>Cnt<span class="token operator">&lt;=</span><span class="token number">5'd11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                CntH<span class="token operator">&lt;=</span>CntH_temp<span class="token punctuation">;</span>                CntL<span class="token operator">&lt;=</span>CntL_temp<span class="token punctuation">;</span>                Mode_tag<span class="token operator">&lt;=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>Cnt<span class="token operator">==</span><span class="token number">5'd0</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                CntH<span class="token operator">&lt;=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                CntL<span class="token operator">&lt;=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                Mode_tag<span class="token operator">&lt;=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>Cnt<span class="token operator">==</span><span class="token number">5'd12</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                CntH<span class="token operator">&lt;=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                CntL<span class="token operator">&lt;=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                Mode_tag<span class="token operator">&lt;=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span>            <span class="token keyword">begin</span>                CntH<span class="token operator">&lt;=</span><span class="token punctuation">(</span>Cnt<span class="token operator">-</span><span class="token number">5'd12</span><span class="token operator">-</span><span class="token punctuation">(</span>Cnt<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">)</span><span class="token operator">/</span>ten<span class="token punctuation">;</span>                CntL<span class="token operator">&lt;=</span><span class="token punctuation">(</span>Cnt<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">;</span>                Mode_tag<span class="token operator">&lt;=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>          <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><p><strong>手动调时（分/秒）</strong></p><p>手动逐位校分/秒模块实现将传入的当前时间作为校时初值，并通过上下按键对当前位的数值改变。</p><ol><li>设置校时初值：设置一标志位flag，每当调时使能select_EN无效，即处在非调时模块时，将标志位置1，开放置数使能。当进入调时模块时，调时使能和置数使能都有效，此时将传入的当前时间赋值给计数器，并将标志位flag置0关闭置数使能。直到退出调试模式再开放置数使能</li><li>按键调时：具体实现方式与左右按键选位类似，都是在高频时钟下设置标志位作为按键响应开关的同步电平检测，并在此基础上加了一次判断，只有当闪烁位置等于当前位置时才进行计数，实现逐位调时</li></ol><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">manua_lcount</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> select_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mode<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> flicker_pos<span class="token punctuation">,</span>current_pos<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> set<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>Q    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> up_flag<span class="token punctuation">,</span>down_flag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> flag<span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        up_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        down_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> select_EN<span class="token punctuation">)</span>            flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>select_EN <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span>           <span class="token keyword">begin</span>            Q <span class="token operator">&lt;=</span> set<span class="token punctuation">;</span>            flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token function">if</span><span class="token punctuation">(</span>select_EN<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> current_pos<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                <span class="token comment" spellcheck="true">//设立标志位，防止一直调动</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttu<span class="token punctuation">)</span>                    up_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttd<span class="token punctuation">)</span>                    down_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//上调</span>                <span class="token function">if</span><span class="token punctuation">(</span>up_flag <span class="token operator">&amp;&amp;</span> buttu<span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    Q <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>Q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> mode<span class="token punctuation">;</span>                    up_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token comment" spellcheck="true">//下调</span>                <span class="token function">if</span><span class="token punctuation">(</span>down_flag <span class="token operator">&amp;&amp;</span> buttd<span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>Q <span class="token operator">==</span> <span class="token number">4'd0</span><span class="token punctuation">)</span>                        Q <span class="token operator">&lt;=</span> mode <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        Q <span class="token operator">&lt;=</span> Q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                     down_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><p><strong>手动调时（时）</strong></p><p>手动校时部分的大体思路和逻辑与手动校分/秒类似，不同之处在于传入当前小时时要先进行进制转换，无论传入的是24小时制还是12小时制，统一转化为24小时制便于计数。此外还需实施检测显示进制的变化，因此增加了一个always检测小时高位，低位和进制，任何一项改变时根据当前的显示进制进行进制换算，输出相应的小时数以及进制标志。</p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">manual_count24</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> select_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> Mode<span class="token punctuation">,</span>    <span class="token keyword">input</span> buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> flicker_pos<span class="token punctuation">,</span>current_pos<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Mode_set<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>H_set<span class="token punctuation">,</span>L_set<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>Modetag<span class="token punctuation">,</span>H<span class="token punctuation">,</span>L    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> up_flag<span class="token punctuation">,</span>down_flag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> flag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp_2<span class="token punctuation">;</span>    <span class="token keyword">parameter</span> ten<span class="token operator">=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Modetag_temp<span class="token punctuation">,</span>H_temp<span class="token punctuation">,</span>L_temp<span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> select_EN<span class="token punctuation">)</span>            flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>select_EN <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            Modetag_temp <span class="token operator">=</span> Mode_set<span class="token punctuation">;</span>            H_temp <span class="token operator">=</span> H_set<span class="token punctuation">;</span>            L_temp <span class="token operator">=</span> L_set<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//统一转化为24小时制时间</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Modetag_temp <span class="token operator">==</span> <span class="token number">4'd10</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                tmp <span class="token operator">=</span> H_temp <span class="token operator">*</span> ten <span class="token operator">+</span> L_temp<span class="token punctuation">;</span>                <span class="token function">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">5'd12</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    H_temp <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>                    L_temp <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                Modetag_temp <span class="token operator">&lt;=</span><span class="token number">4'd12</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Modetag_temp<span class="token operator">==</span><span class="token number">4'd11</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                tmp <span class="token operator">=</span> H_temp <span class="token operator">*</span> ten <span class="token operator">+</span> L_temp<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">5'd12</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    H_temp <span class="token operator">&lt;=</span> <span class="token number">4'd1</span><span class="token punctuation">;</span>                    L_temp <span class="token operator">&lt;=</span> <span class="token number">4'd2</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span>                <span class="token keyword">begin</span>                    H_temp <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token operator">-</span><span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">)</span><span class="token operator">/</span>ten<span class="token punctuation">;</span>                    L_temp <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>tmp<span class="token operator">+</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">;</span>                <span class="token keyword">end</span>                Modetag_temp <span class="token operator">&lt;=</span><span class="token number">4'd12</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>select_EN<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> current_pos<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                <span class="token comment" spellcheck="true">//设置标志位，防止一直调动</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttu<span class="token punctuation">)</span>                    up_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttd<span class="token punctuation">)</span>                    down_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//上调</span>                <span class="token function">if</span><span class="token punctuation">(</span>up_flag <span class="token operator">&amp;&amp;</span> buttu<span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>H_temp<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>L_temp<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">{</span>H_temp<span class="token punctuation">,</span>L_temp<span class="token operator">}</span> <span class="token operator">&lt;=</span> <span class="token number">8'h00</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>H_temp<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>L_temp<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">begin</span>                        H_temp <span class="token operator">&lt;=</span> H_temp<span class="token punctuation">;</span>                        L_temp <span class="token operator">&lt;=</span> L_temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>L_temp <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span>                    <span class="token keyword">begin</span>                        H_temp <span class="token operator">&lt;=</span> H_temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                        L_temp <span class="token operator">&lt;=</span> <span class="token number">4'b0000</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span>                    <span class="token keyword">begin</span>                        H_temp <span class="token operator">&lt;=</span> H_temp<span class="token punctuation">;</span>                        L_temp <span class="token operator">&lt;=</span> L_temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    up_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token comment" spellcheck="true">//下调</span>                <span class="token function">if</span><span class="token punctuation">(</span>down_flag <span class="token operator">&amp;&amp;</span> buttd<span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>H_temp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>L_temp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token operator">{</span>H_temp<span class="token punctuation">,</span>L_temp<span class="token operator">}</span> <span class="token operator">&lt;=</span> <span class="token number">8'h23</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>L_temp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">begin</span>                        H_temp <span class="token operator">&lt;=</span> H_temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                        L_temp <span class="token operator">&lt;=</span> <span class="token number">4'b1001</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span>                    <span class="token keyword">begin</span>                        H_temp <span class="token operator">&lt;=</span> H_temp<span class="token punctuation">;</span>                        L_temp <span class="token operator">&lt;=</span> L_temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    down_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//转化为对应进制时间</span>    <span class="token important">always@</span><span class="token punctuation">(</span>H_temp <span class="token keyword">or</span> L_temp <span class="token keyword">or</span> Mode<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>Mode<span class="token operator">==</span><span class="token constant">`Mode_24</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>            H<span class="token operator">&lt;=</span>H_temp<span class="token punctuation">;</span>            L<span class="token operator">&lt;=</span>L_temp<span class="token punctuation">;</span>            Modetag<span class="token operator">&lt;=</span><span class="token number">4'd12</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>            tmp_2<span class="token operator">=</span> H_temp <span class="token operator">*</span> ten<span class="token operator">+</span>L_temp<span class="token punctuation">;</span>            <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp_2<span class="token operator">>=</span><span class="token number">5'd1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp_2<span class="token operator">&lt;=</span><span class="token number">5'd11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                H<span class="token operator">&lt;=</span>H_temp<span class="token punctuation">;</span>                L<span class="token operator">&lt;=</span>L_temp<span class="token punctuation">;</span>                Modetag<span class="token operator">&lt;=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>tmp_2<span class="token operator">==</span><span class="token number">5'd0</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                H<span class="token operator">&lt;=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                L<span class="token operator">&lt;=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                Modetag<span class="token operator">&lt;=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>tmp_2<span class="token operator">==</span><span class="token number">5'd12</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                H<span class="token operator">&lt;=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                L<span class="token operator">&lt;=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                Modetag<span class="token operator">&lt;=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span>            <span class="token keyword">begin</span>                H<span class="token operator">&lt;=</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token operator">-</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">)</span><span class="token operator">/</span>ten<span class="token punctuation">;</span>                L<span class="token operator">&lt;=</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">;</span>                Modetag<span class="token operator">&lt;=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>          <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><hr><h6 id="秒表计时器模块"><a href="#秒表计时器模块" class="headerlink" title="秒表计时器模块"></a>秒表计时器模块</h6><p>秒表模块分别调用秒表频率发生器，扫描频率发生器，秒表计数器，共阳数码管译码器，并对译码产生的段码依扫描频率逐个扫描。</p><p>因为秒表的计时精度为10ms,我们首先调用<code>timediv</code>产生100HZ频率作为秒表的基频，然后调用<code>divider</code>产生1KHZ的频率作为数码管的扫描频率，然后正确调用6个秒表计时器为秒表的6个时间显示位计时，为每一位都设置正确的模长，并且设置合适的使能信号把6个秒表计时器连接起来，然后调用<code>digital_tube</code>，输入计数器产生的计数值得到对应的段码，然后在扫描时钟下逐位扫描点亮数码管。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/%E7%BB%98%E5%9B%BE59.png" alt></p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span> <span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">timer</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> timer_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>pause<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pos<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> clk_100hz<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">;</span>    <span class="token keyword">wire</span> EN<span class="token punctuation">,</span>SL_EN<span class="token punctuation">,</span>SH_EN<span class="token punctuation">,</span>ML_EN<span class="token punctuation">,</span>MH_EN<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ms_one<span class="token punctuation">,</span>ms_dec<span class="token punctuation">,</span>s_one<span class="token punctuation">,</span>s_dec<span class="token punctuation">,</span>min_one<span class="token punctuation">,</span>min_dec<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    timediv <span class="token function">D0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span>pause<span class="token punctuation">,</span>clk_100hz<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//秒表频率发生器  100hz</span>    divider_sweep <span class="token function">D1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//扫描频率发生器  1Khz</span>    tmicnt <span class="token function">MS0</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span>EN<span class="token punctuation">,</span>ms_one<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmicnt <span class="token function">MS1</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span><span class="token punctuation">(</span>ms_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ms_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    tmicnt <span class="token function">S0</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span>SL_EN<span class="token punctuation">,</span>s_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    tmicnt <span class="token function">S1</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd6</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span>SH_EN<span class="token punctuation">,</span>s_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    tmicnt <span class="token function">M0</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span>ML_EN<span class="token punctuation">,</span>min_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    tmicnt <span class="token function">M1</span><span class="token punctuation">(</span>clk_100hz<span class="token punctuation">,</span>timer_EN<span class="token punctuation">,</span><span class="token number">4'd6</span><span class="token punctuation">,</span>reset<span class="token punctuation">,</span>MH_EN<span class="token punctuation">,</span>min_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//秒表计数器  </span>    digital_tube <span class="token function">T0</span><span class="token punctuation">(</span>ms_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T1</span><span class="token punctuation">(</span>ms_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T2</span><span class="token punctuation">(</span>s_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T3</span><span class="token punctuation">(</span>s_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T4</span><span class="token punctuation">(</span>min_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T5</span><span class="token punctuation">(</span>min_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//共阳数码管译码器</span>    <span class="token comment" spellcheck="true">//设置使能信号</span>    <span class="token keyword">assign</span> EN <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//最低位永远使能有效</span>    <span class="token comment" spellcheck="true">//高位使能在次高位使能有效且低位将要进位的情况下有效</span>    <span class="token keyword">assign</span> SL_EN <span class="token operator">=</span> <span class="token punctuation">(</span>ms_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ms_dec <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> SH_EN <span class="token operator">=</span> SL_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> ML_EN <span class="token operator">=</span> SH_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_dec <span class="token operator">==</span> <span class="token number">4'd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> MH_EN <span class="token operator">=</span> ML_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_5</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_None</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//模式显示标志</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        tmp <span class="token operator">&lt;=</span> <span class="token number">8'b11111110</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//逐个扫描</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_sweep<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        tmp <span class="token operator">&lt;=</span> <span class="token operator">{</span>tmp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token number">8'b11111110</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b11111101</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b11111011</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b11110111</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b11101111</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b11011111</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b10111111</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b01111111</span><span class="token punctuation">:</span>seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>        pos <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><hr><h6 id="常规显示模块"><a href="#常规显示模块" class="headerlink" title="常规显示模块"></a>常规显示模块</h6><p>显示模块分别调用了秒脉冲发生器，扫描频率发生器，计数器，调时模块，设置闹钟模块，七段共阳数码管译码器。实现正常同步计时并显示，整点报时，闹钟到点闪烁并可通过按键关闭。</p><p>正常显示：采用同步计时，将5个计数器级联起来，利用前级的进位信号生成后级的使能信号控制同步计时。</p><p>闹钟到点闪烁：flicker在设置闹钟的时/分与当前时间的时/分相同时有效，alarm在flicker无效即不在设定时间范围内闹钟不闪烁时重置为有效，若当前处于显示模块且confirm即关闭闹钟按键按下时，alarm无效，闪烁被强行关闭。闪烁原理与调试模块闪烁类似，当flicker和alarm同时有效时，在闪烁时钟clk_flicker的作用下，周期性的将段码置1，将数码管熄灭，表现出闪烁状态。</p><p>整点报时：int_time在当前时间的分和秒都为0，即为整点时有效，在秒脉冲的作用下，若为整点时刻，首先对当前的时间进行换算，换算成12小时进制，提取出上下午标志与12小时进制下的小时位。根据小时位点亮对应LED，根据标志位点亮三色灯区分上下午。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/%E7%BB%98%E5%9B%BE1.png" alt></p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">display_time</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> Mode<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>    <span class="token keyword">input</span> buttl<span class="token punctuation">,</span>buttr<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> led<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RGB_led1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RGB_led2<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pos<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg    <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//模块中变量定义</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> display_pos<span class="token punctuation">,</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> display_seg<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hone_temp<span class="token punctuation">,</span>hdec_temp<span class="token punctuation">,</span>Modetag_temp<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp_2<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp_3<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp_rgb<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> times<span class="token punctuation">;</span>    <span class="token keyword">reg</span> alarm<span class="token punctuation">;</span>    <span class="token keyword">parameter</span> ten<span class="token operator">=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> clk_1hz<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">;</span>    <span class="token keyword">wire</span> SL_EN<span class="token punctuation">,</span>SH_EN<span class="token punctuation">,</span>ML_EN<span class="token punctuation">,</span>MH_EN<span class="token punctuation">,</span>H_EN<span class="token punctuation">;</span>    <span class="token keyword">wire</span> display_EN<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>alarm_EN<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> s_one<span class="token punctuation">,</span>s_dec<span class="token punctuation">,</span>min_one<span class="token punctuation">,</span>min_dec<span class="token punctuation">,</span>hour_one<span class="token punctuation">,</span>hour_dec<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sone_cache<span class="token punctuation">,</span>sdec_cache<span class="token punctuation">,</span>minone_cache<span class="token punctuation">,</span>mindec_cache<span class="token punctuation">,</span>hone_cache<span class="token punctuation">,</span>hdec_cache<span class="token punctuation">,</span>Modetag_cache<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minone_cache_al<span class="token punctuation">,</span>mindec_cache_al<span class="token punctuation">,</span>hone_cache_al<span class="token punctuation">,</span>hdec_cache_al<span class="token punctuation">,</span>Modetag_cache_al<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> select_seg<span class="token punctuation">,</span>alarm_seg<span class="token punctuation">,</span>seg_temp<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> select_pos<span class="token punctuation">,</span>alarm_pos<span class="token punctuation">,</span>pos_temp<span class="token punctuation">;</span>    <span class="token keyword">wire</span> tag<span class="token punctuation">;</span>    <span class="token keyword">wire</span> flicker<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//三种模式使能设置</span>    <span class="token keyword">assign</span> display_EN <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>func<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>func<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> select_EN <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">~</span>func<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>func<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> alarm_EN <span class="token operator">=</span> <span class="token punctuation">(</span>func<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>func<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//三种模式的输出选择器</span>    <span class="token keyword">assign</span> pos_temp <span class="token operator">=</span> select_EN <span class="token operator">?</span> select_pos <span class="token punctuation">:</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">assign</span> pos <span class="token operator">=</span> alarm_EN <span class="token operator">?</span> alarm_pos <span class="token punctuation">:</span> pos_temp<span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_temp <span class="token operator">=</span> select_EN <span class="token operator">?</span> select_seg <span class="token punctuation">:</span> display_seg<span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg <span class="token operator">=</span> alarm_EN <span class="token operator">?</span> alarm_seg <span class="token punctuation">:</span> seg_temp<span class="token punctuation">;</span>    divider_100hz <span class="token function">D0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_1hz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生1HZ的频率</span>   <span class="token comment" spellcheck="true">// defparam D0.out_freq = 1;</span>    divider_sweep <span class="token function">D1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生1KHZ的扫描频率</span>    divider_sweep <span class="token function">D2</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生2HZ的闪烁频率</span>    <span class="token keyword">defparam</span> D2<span class="token punctuation">.</span>out_freq_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//级联5个计时器</span>    count_10 <span class="token function">S0</span><span class="token punctuation">(</span>clk_1hz<span class="token punctuation">,</span>SL_EN<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>sone_cache<span class="token punctuation">,</span>s_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    count_6 <span class="token function">S1</span><span class="token punctuation">(</span>clk_1hz<span class="token punctuation">,</span>SH_EN<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>sdec_cache<span class="token punctuation">,</span>s_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    count_10 <span class="token function">M0</span><span class="token punctuation">(</span>clk_1hz<span class="token punctuation">,</span>ML_EN<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>minone_cache<span class="token punctuation">,</span>min_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    count_6 <span class="token function">M1</span><span class="token punctuation">(</span>clk_1hz<span class="token punctuation">,</span>MH_EN<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>mindec_cache<span class="token punctuation">,</span>min_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取分秒的个位数字</span>    count_Hour <span class="token function">H0</span><span class="token punctuation">(</span>clk_1hz<span class="token punctuation">,</span>H_EN<span class="token punctuation">,</span>Mode<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>confirm<span class="token punctuation">,</span>hdec_cache<span class="token punctuation">,</span>hone_cache<span class="token punctuation">,</span>Modetag_cache<span class="token punctuation">,</span>hour_dec<span class="token punctuation">,</span>hour_one<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取上下午标志位及对应的小时数字</span>    <span class="token comment" spellcheck="true">//调用调时模块</span>    select_time <span class="token function">U1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>Mode<span class="token punctuation">,</span>buttl<span class="token punctuation">,</span>buttr<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>s_one<span class="token punctuation">,</span>s_dec<span class="token punctuation">,</span>min_one<span class="token punctuation">,</span>min_dec<span class="token punctuation">,</span>hour_one<span class="token punctuation">,</span>hour_dec<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">,</span>select_pos<span class="token punctuation">,</span>select_seg<span class="token punctuation">,</span>        sone_cache<span class="token punctuation">,</span>sdec_cache<span class="token punctuation">,</span>minone_cache<span class="token punctuation">,</span>mindec_cache<span class="token punctuation">,</span>hone_cache<span class="token punctuation">,</span>hdec_cache<span class="token punctuation">,</span>Modetag_cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用设置闹钟模块</span>    set_alarm <span class="token function">U2</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>Mode<span class="token punctuation">,</span>buttl<span class="token punctuation">,</span>buttr<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>alarm_EN<span class="token punctuation">,</span>alarm_pos<span class="token punctuation">,</span>alarm_seg<span class="token punctuation">,</span>        minone_cache_al<span class="token punctuation">,</span>mindec_cache_al<span class="token punctuation">,</span>hone_cache_al<span class="token punctuation">,</span>hdec_cache_al<span class="token punctuation">,</span>Modetag_cache_al<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//共阳数码管译码器</span>    digital_tube <span class="token function">T0</span><span class="token punctuation">(</span>s_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T1</span><span class="token punctuation">(</span>s_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T2</span><span class="token punctuation">(</span>min_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T3</span><span class="token punctuation">(</span>min_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T4</span><span class="token punctuation">(</span>hour_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T5</span><span class="token punctuation">(</span>hour_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T6</span><span class="token punctuation">(</span>Mode_tag<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置使能信号</span>    <span class="token comment" spellcheck="true">//低位使能永远有效，高位使能在次高位使能有效且低位将要进位的情况下有效</span>    <span class="token keyword">assign</span> SL_EN <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> SH_EN <span class="token operator">=</span> SL_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> ML_EN <span class="token operator">=</span> SH_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s_dec <span class="token operator">==</span> <span class="token number">4'd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> MH_EN <span class="token operator">=</span> ML_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min_one <span class="token operator">==</span> <span class="token number">4'd9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> H_EN <span class="token operator">=</span> MH_EN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min_dec <span class="token operator">==</span> <span class="token number">4'd5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_None</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第七位数码管长熄</span>    <span class="token keyword">assign</span> flicker <span class="token operator">=</span> <span class="token punctuation">(</span>min_one <span class="token operator">==</span> minone_cache_al<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>min_dec <span class="token operator">==</span> mindec_cache_al<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hour_one <span class="token operator">==</span> hone_cache_al<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>hour_dec <span class="token operator">==</span> hdec_cache_al<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>Mode_tag <span class="token operator">==</span> Modetag_cache_al<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//闹钟闪烁标志位</span>    <span class="token keyword">assign</span> int_time <span class="token operator">=</span> <span class="token operator">{</span>s_one<span class="token punctuation">,</span>s_dec<span class="token punctuation">,</span>min_one<span class="token punctuation">,</span>min_dec<span class="token operator">}</span> <span class="token operator">==</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//整点标志位</span>    <span class="token comment" spellcheck="true">//初始化相关变量</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>       display_pos <span class="token operator">&lt;=</span> <span class="token number">8'b11111110</span><span class="token punctuation">;</span>       tmp_rgb <span class="token operator">&lt;=</span> <span class="token number">3'b001</span><span class="token punctuation">;</span>       times <span class="token operator">&lt;=</span> <span class="token number">3'b0</span><span class="token punctuation">;</span>        alarm <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>       RGB_led1<span class="token operator">=</span><span class="token number">3'd0</span><span class="token punctuation">;</span>       RGB_led2<span class="token operator">=</span><span class="token number">3'd0</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//整点报时模块</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_1hz<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>int_time<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断是否是整点</span>        <span class="token keyword">begin</span>            times <span class="token operator">=</span> <span class="token number">3'd6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设定为报时的秒数，相当于开启报时</span>            <span class="token comment" spellcheck="true">//如果是24小时制的时间则统一转化为12小时制的时间</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Mode_tag <span class="token operator">==</span> <span class="token number">4'd12</span><span class="token punctuation">)</span>            <span class="token keyword">begin</span>                tmp_2<span class="token operator">=</span> hour_dec <span class="token operator">*</span> ten<span class="token operator">+</span>hour_one<span class="token punctuation">;</span>                <span class="token function">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp_2<span class="token operator">>=</span><span class="token number">5'd1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tmp_2<span class="token operator">&lt;=</span><span class="token number">5'd11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    hdec_temp<span class="token operator">=</span>hour_one<span class="token punctuation">;</span>                    hone_temp<span class="token operator">=</span>hour_one<span class="token punctuation">;</span>                    Modetag_temp<span class="token operator">=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>tmp_2<span class="token operator">==</span><span class="token number">5'd0</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    hdec_temp<span class="token operator">=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                    hone_temp<span class="token operator">=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                    Modetag_temp<span class="token operator">=</span><span class="token number">4'd10</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>tmp_2<span class="token operator">==</span><span class="token number">5'd12</span><span class="token punctuation">)</span>                <span class="token keyword">begin</span>                    hdec_temp<span class="token operator">=</span><span class="token number">4'd1</span><span class="token punctuation">;</span>                    hone_temp<span class="token operator">=</span><span class="token number">4'd2</span><span class="token punctuation">;</span>                    Modetag_temp<span class="token operator">=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span>                <span class="token keyword">begin</span>                    hdec_temp<span class="token operator">=</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token operator">-</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">)</span><span class="token operator">/</span>ten<span class="token punctuation">;</span>                    hone_temp<span class="token operator">=</span><span class="token punctuation">(</span>tmp_2<span class="token operator">-</span><span class="token number">5'd12</span><span class="token punctuation">)</span><span class="token operator">%</span>ten<span class="token punctuation">;</span>                    Modetag_temp<span class="token operator">=</span><span class="token number">4'd11</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token comment" spellcheck="true">//如果本身就是12小时制的时间，则无需改变</span>            <span class="token keyword">else</span>            <span class="token keyword">begin</span>                hdec_temp<span class="token operator">=</span>hour_dec<span class="token punctuation">;</span>                hone_temp<span class="token operator">=</span>hour_one<span class="token punctuation">;</span>                Modetag_temp<span class="token operator">=</span>Mode_tag<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token comment" spellcheck="true">//根据现在是多少小时指定哪一位Led灯亮</span>            tmp_3 <span class="token operator">=</span> hdec_temp <span class="token operator">*</span> ten <span class="token operator">+</span> hone_temp<span class="token punctuation">;</span>            <span class="token function">case</span><span class="token punctuation">(</span>tmp_3<span class="token punctuation">)</span>                <span class="token number">4'd1</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0000_0001</span><span class="token punctuation">;</span>                <span class="token number">4'd2</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0000_0010</span><span class="token punctuation">;</span>                <span class="token number">4'd3</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0000_0100</span><span class="token punctuation">;</span>                <span class="token number">4'd4</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0000_1000</span><span class="token punctuation">;</span>                <span class="token number">4'd5</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0001_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd6</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0010_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd7</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_0100_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd8</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0000_1000_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd9</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span> <span class="token number">12'b0001_0000_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd10</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span><span class="token number">12'b0010_0000_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd11</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span><span class="token number">12'b0100_0000_0000</span><span class="token punctuation">;</span>                <span class="token number">4'd12</span><span class="token punctuation">:</span>led<span class="token operator">&lt;=</span><span class="token number">12'b1000_0000_0000</span><span class="token punctuation">;</span>            <span class="token keyword">endcase</span>        <span class="token keyword">end</span>        <span class="token comment" spellcheck="true">//正处于报时阶段</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>times<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token comment" spellcheck="true">//根据上下午标志指定哪一位RGB Led三种颜色轮番亮</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>Modetag_temp<span class="token punctuation">)</span>                <span class="token number">4'd10</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    RGB_led1 <span class="token operator">=</span> tmp_rgb<span class="token punctuation">;</span>                    tmp_rgb <span class="token operator">={</span>tmp_rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token number">4'd11</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    RGB_led2 <span class="token operator">=</span> tmp_rgb<span class="token punctuation">;</span>                    tmp_rgb <span class="token operator">={</span>tmp_rgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_rgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">endcase</span>            times<span class="token operator">=</span>times<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//报时剩余秒数减1</span>        <span class="token keyword">end</span>        <span class="token comment" spellcheck="true">//不处于报时阶段，关闭所有Led和RGB Led</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>            RGB_led1<span class="token operator">=</span><span class="token number">3'd0</span><span class="token punctuation">;</span>            RGB_led2<span class="token operator">=</span><span class="token number">3'd0</span><span class="token punctuation">;</span>            tmp_rgb <span class="token operator">=</span> <span class="token number">3'b001</span><span class="token punctuation">;</span>            led <span class="token operator">=</span><span class="token number">12'b0000_0000_0000</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//高频率扫描在闹钟期间是否有取消闹钟操作，若有立即关闭闹钟使能</span>    <span class="token important">always @</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flicker<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            alarm<span class="token operator">&lt;=</span><span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>confirm <span class="token operator">&amp;&amp;</span> display_EN<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                alarm<span class="token operator">&lt;=</span><span class="token number">1'b0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//扫描模块</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_sweep<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        display_pos <span class="token operator">&lt;=</span> <span class="token operator">{</span>display_pos<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>display_pos<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>display_pos<span class="token punctuation">)</span>            <span class="token number">8'b11111110</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token comment" spellcheck="true">//判断是否是闹钟闪烁阶段，且闹钟使能有效，在闪烁时钟下闪烁</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                        display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b11111101</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b11111011</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b11110111</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b11101111</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b11011111</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">8'b10111111</span><span class="token punctuation">:</span>            display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token number">8'b01111111</span><span class="token punctuation">:</span>            <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>flicker <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> alarm<span class="token punctuation">)</span>                    display_seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    display_seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>        tmp <span class="token operator">&lt;=</span> display_pos<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><hr><h6 id="调时模块"><a href="#调时模块" class="headerlink" title="调时模块"></a>调时模块</h6><p>调时模块分别调用了扫描频率发生器，闪烁频率发生器，手动调时计数器，共阳七段数码管译码器。该模块实现将当前时刻传入调时，并且可以时，分，秒逐位进行调时。通过左右按键来选择被调位，选中的被调位进行闪烁突出显示；通过上下按键对选中的被调位调时，且在调时过程中可以切换12/24进制显示。</p><ol><li><p>左右按键选择被调位：</p><p>在1KHZ的扫描频率下同步检测左右按键的电平，并设立两个标志位left_flag, right_flag作为<strong>按键响应使能</strong>。当左/右按键空闲时，将标志位置1，开放按键响应；当检测到左/右按键被按下，即为高电平，且标志位是1时才进行向左/向右选择，即闪烁位置改变，响应按键，紧接着将标志位置0，关闭按键响应从而使按键此后直到松开前不会再被响应。待按键松开后，将标志位置1，重新开放按键响应。如此可以使高频同步电平检测模式下按键在按下时会且仅会被响应一次。</p></li><li><p>闪烁：</p><p>在数码管依扫描时钟频率逐位扫描中，修改段码查找表：对于调时时间的每一位，判断是否应该当前位闪烁，并且是否是闪烁时钟的低电平。若是当前位闪烁且此时处于闪烁时钟低电平，则此位的段码置为全1，对应此时此位熄灭，其他情况赋值为正常段码，对应正常的动态扫描显示。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/%E7%BB%98%E5%9B%BE13.png" alt></p></li></ol><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">select_time</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>sw15<span class="token punctuation">,</span>buttl<span class="token punctuation">,</span>buttr<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>    <span class="token keyword">input</span> select_EN<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sone<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sdec<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minone<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mindec<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hone<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hdec<span class="token punctuation">,</span>    <span class="token keyword">input</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Modetag<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pos<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sone_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> sdec_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minone_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mindec_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hone_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hdec_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Modetag_cache    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> clk_sweep<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> s_one<span class="token punctuation">,</span>s_dec<span class="token punctuation">,</span>min_one<span class="token punctuation">,</span>min_dec<span class="token punctuation">,</span>h_one<span class="token punctuation">,</span>h_dec<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> left_flag<span class="token punctuation">,</span>right_flag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> flicker_pos<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    divider_sweep <span class="token function">D0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生1KHZ扫描频率</span>    divider_sweep <span class="token function">D1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生2HZ闪烁频率</span>    <span class="token keyword">defparam</span> D1<span class="token punctuation">.</span>out_freq_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调节时间部分</span>    <span class="token comment" spellcheck="true">//调节秒的个位</span>    manua_lcount <span class="token function">C0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd0</span><span class="token punctuation">,</span>sone<span class="token punctuation">,</span>s_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调节秒的十位</span>    manua_lcount <span class="token function">C1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd6</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd1</span><span class="token punctuation">,</span>sdec<span class="token punctuation">,</span>s_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调节分的个位</span>    manua_lcount <span class="token function">C2</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd2</span><span class="token punctuation">,</span>minone<span class="token punctuation">,</span>min_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调节分的十位</span>    manua_lcount <span class="token function">C3</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd6</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd3</span><span class="token punctuation">,</span>mindec<span class="token punctuation">,</span>min_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调节时</span>    manual_count24 <span class="token function">C4</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>select_EN<span class="token punctuation">,</span>sw15<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd4</span><span class="token punctuation">,</span>Modetag<span class="token punctuation">,</span>hdec<span class="token punctuation">,</span>hone<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">,</span>h_dec<span class="token punctuation">,</span>h_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//共阳数码管译码器</span>    digital_tube <span class="token function">T0</span><span class="token punctuation">(</span>s_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T1</span><span class="token punctuation">(</span>s_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T2</span><span class="token punctuation">(</span>min_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T3</span><span class="token punctuation">(</span>min_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T4</span><span class="token punctuation">(</span>h_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T5</span><span class="token punctuation">(</span>h_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T7</span><span class="token punctuation">(</span>Mode_tag<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_None</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        flicker_pos <span class="token operator">&lt;=</span> <span class="token number">4'b0000</span><span class="token punctuation">;</span>        left_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        right_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">&lt;=</span> <span class="token number">8'b11111110</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//扫描点亮每一位数码管 闪烁 or 常亮</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_sweep<span class="token punctuation">)</span>    <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>select_EN<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttl<span class="token punctuation">)</span>            left_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttr<span class="token punctuation">)</span>            right_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>left_flag <span class="token operator">&amp;&amp;</span> buttl<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                flicker_pos <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>flicker_pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span>                left_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token function">if</span><span class="token punctuation">(</span>right_flag <span class="token operator">&amp;&amp;</span> buttr<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                flicker_pos <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                flicker_pos <span class="token operator">&lt;=</span> flicker_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            right_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        tmp <span class="token operator">&lt;=</span> <span class="token operator">{</span>tmp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token number">8'b11111110</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11111101</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11111011</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11110111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11101111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11011111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b10111111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b01111111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>        <span class="token keyword">endcase</span>        pos <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//结果回传</span>    <span class="token keyword">assign</span>  sone_cache <span class="token operator">=</span> s_one<span class="token punctuation">,</span>            sdec_cache <span class="token operator">=</span> s_dec<span class="token punctuation">,</span>            minone_cache <span class="token operator">=</span> min_one<span class="token punctuation">,</span>            mindec_cache <span class="token operator">=</span> min_dec<span class="token punctuation">,</span>            hone_cache <span class="token operator">=</span> h_one<span class="token punctuation">,</span>            hdec_cache <span class="token operator">=</span> h_dec<span class="token punctuation">,</span>            Modetag_cache <span class="token operator">=</span> Mode_tag<span class="token punctuation">;</span>   <span class="token keyword">endmodule</span></code></pre><hr><h6 id="闹钟模块"><a href="#闹钟模块" class="headerlink" title="闹钟模块"></a>闹钟模块</h6><p>闹钟模块调用了扫描频率发生器，闪烁频率发生器，手动调时/分计数器，七段共阳数码管显示段码译码器。其中，闪烁与手动调时部分的逻辑与调时模块完全一致，此外，该模块还将设置的闹钟时间锁存起来，使得每次进入闹钟模块设置闹钟时都以上一次设置的时间为起始。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/%E7%BB%98%E5%9B%BE9.png" alt></p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`include</span><span class="token string">"para.v"</span><span class="token keyword">module</span> <span class="token function">set_alarm</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>sw15<span class="token punctuation">,</span>buttl<span class="token punctuation">,</span>buttr<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>    <span class="token keyword">input</span> alarm_EN<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> pos<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minone_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mindec_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hone_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hdec_cache<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Modetag_cache    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> minone<span class="token punctuation">;</span>    <span class="token keyword">reg</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mindec<span class="token punctuation">;</span>    <span class="token keyword">reg</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hone<span class="token punctuation">;</span>    <span class="token keyword">reg</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> hdec<span class="token punctuation">;</span>    <span class="token keyword">reg</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Modetag<span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>       minone <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>       mindec <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>       hone <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>       hdec <span class="token operator">&lt;=</span> <span class="token number">4'd0</span><span class="token punctuation">;</span>       Modetag <span class="token operator">&lt;=</span> <span class="token number">4'd12</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">wire</span> clk_sweep<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> min_one<span class="token punctuation">,</span>min_dec<span class="token punctuation">,</span>h_one<span class="token punctuation">,</span>h_dec<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> left_flag<span class="token punctuation">,</span>right_flag<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> flicker_pos<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    divider_sweep <span class="token function">D0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_sweep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生1KHZ扫描频率</span>    divider_sweep <span class="token function">D1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>clk_flicker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//产生2HZ的闪烁频率</span>    <span class="token keyword">defparam</span> D1<span class="token punctuation">.</span>out_freq_1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手动调时间部分</span>    <span class="token comment" spellcheck="true">//调分个位</span>    manua_lcount <span class="token function">C0</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>alarm_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd10</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd0</span><span class="token punctuation">,</span>minone<span class="token punctuation">,</span>min_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调分十位</span>    manua_lcount <span class="token function">C1</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>alarm_EN<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span><span class="token number">4'd6</span><span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd1</span><span class="token punctuation">,</span>mindec<span class="token punctuation">,</span>min_dec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调时</span>    manual_count24 <span class="token function">C2</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span>alarm_EN<span class="token punctuation">,</span>sw15<span class="token punctuation">,</span>buttu<span class="token punctuation">,</span>buttd<span class="token punctuation">,</span>flicker_pos<span class="token punctuation">,</span><span class="token number">4'd2</span><span class="token punctuation">,</span>Modetag<span class="token punctuation">,</span>hdec<span class="token punctuation">,</span>hone<span class="token punctuation">,</span>Mode_tag<span class="token punctuation">,</span>h_dec<span class="token punctuation">,</span>h_one<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//共阳数码管译码器</span>    digital_tube <span class="token function">T2</span><span class="token punctuation">(</span>min_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T3</span><span class="token punctuation">(</span>min_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T4</span><span class="token punctuation">(</span>h_one<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T5</span><span class="token punctuation">(</span>h_dec<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    digital_tube <span class="token function">T7</span><span class="token punctuation">(</span>Mode_tag<span class="token punctuation">,</span>seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标志位段码指定</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_None</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_L</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">`segcode_A</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>        flicker_pos <span class="token operator">&lt;=</span> <span class="token number">4'b0000</span><span class="token punctuation">;</span>        left_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        right_flag <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        tmp <span class="token operator">&lt;=</span> <span class="token number">8'b11111110</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//扫描模块</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk_sweep<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>alarm_EN<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token comment" spellcheck="true">//移动调时位</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttl<span class="token punctuation">)</span>            left_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span> buttr<span class="token punctuation">)</span>            right_flag<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">if</span><span class="token punctuation">(</span>left_flag <span class="token operator">&amp;&amp;</span> buttl<span class="token punctuation">)</span>            <span class="token keyword">begin</span>                flicker_pos <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>flicker_pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>                left_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token function">if</span><span class="token punctuation">(</span>right_flag <span class="token operator">&amp;&amp;</span> buttr<span class="token punctuation">)</span>        <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                flicker_pos <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                flicker_pos <span class="token operator">&lt;=</span> flicker_pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            right_flag <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment" spellcheck="true">//扫描点亮每一位数码管 闪烁 or 常亮</span>        tmp <span class="token operator">&lt;=</span> <span class="token operator">{</span>tmp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>            <span class="token number">8'b11111110</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11111101</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11111011</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11110111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    <span class="token function">if</span><span class="token punctuation">(</span>flicker_pos <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span> clk_flicker<span class="token punctuation">)</span><span class="token punctuation">)</span>                        seg <span class="token operator">&lt;=</span> <span class="token number">7'b1111111</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11101111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b11011111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                    seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b10111111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token number">8'b01111111</span><span class="token punctuation">:</span>                <span class="token keyword">begin</span>                        seg <span class="token operator">&lt;=</span> seg_cache<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>        <span class="token keyword">endcase</span>        pos <span class="token operator">&lt;=</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//将每次设定闹钟结果送进寄存器，以便下次可以从当前设定闹钟时间开始调节</span>    <span class="token important">always@</span><span class="token punctuation">(</span>min_one <span class="token keyword">or</span> min_dec <span class="token keyword">or</span> h_one <span class="token keyword">or</span> h_dec <span class="token keyword">or</span> Mode_tag<span class="token punctuation">)</span>    <span class="token keyword">begin</span>       minone <span class="token operator">&lt;=</span> min_one<span class="token punctuation">;</span>       mindec <span class="token operator">&lt;=</span> min_dec<span class="token punctuation">;</span>       hone <span class="token operator">&lt;=</span> h_one<span class="token punctuation">;</span>       hdec <span class="token operator">&lt;=</span> h_dec<span class="token punctuation">;</span>       Modetag <span class="token operator">&lt;=</span> Mode_tag<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token comment" spellcheck="true">//结果回传</span>    <span class="token keyword">assign</span>  minone_cache <span class="token operator">=</span> min_one<span class="token punctuation">,</span>            mindec_cache <span class="token operator">=</span> min_dec<span class="token punctuation">,</span>            hone_cache <span class="token operator">=</span> h_one<span class="token punctuation">,</span>            hdec_cache <span class="token operator">=</span> h_dec<span class="token punctuation">,</span>            Modetag_cache <span class="token operator">=</span> Mode_tag<span class="token punctuation">;</span><span class="token keyword">endmodule</span></code></pre><hr><h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><p>在Vivado中保存设计文件，生成比特流。打开硬件管理器连接开发板，将生成的比特流下载到开发板中，可以看到数码管上正常计时并显示时间，拨动显示进制开关sw15可以切换24/12小时进制显示</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224220.jpg" alt></p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224225.jpg" alt></p><p>拨动模式选择开关sw1和sw2切换至调时模式，可以看到调时初值即为当前时刻值，同时秒个位闪烁，按下左右按键可以切换不同位闪烁，按下上下按键调整闪烁位的数值，此时拨动显示进制开关sw15依旧可以切换24/12小时进制显示，按下中间按键后拨动模式选择开关回到显示模式，可以看到数码管上显示的是已经调好的时间</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224308.jpg" alt></p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224356.jpg" alt></p><p>拨动模式选择开关切换至闹钟模式，可以看到最左侧数码管显示“AL”表示当前为闹钟模式，分个位闪烁，按下左右上下按键可以切换不同位并调整时间。闹钟设置完毕后切换回显示模式，当当前时间时间到设置的闹钟时间时，时分秒数码管开始闪烁，表示闹钟响起。按下中间按键后停止闪烁(不按则在1分钟后自动停止)。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224512.jpg" alt></p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224534.jpg" alt></p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224537.jpg" alt="IMG_20200926_224537"></p><p>拨动模式选择开关切换至秒表模式，可以看到最左侧数码管显示“S”表示当前为秒表模式，初始值为00:00:00。按下中间按键，秒表计时开始，精度为10ms，再次按下中间按键，计时暂停，再次按下，计时继续。按下下按键，秒表复位清零。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224611.jpg" alt></p><p>切换模式至显示模式，当当前时间到达整点时，对应12小时进制的小时数的LED点亮，同时对应上下午的三色灯点亮，6秒后熄灭。</p><p><img src="/2020/09/20/duo-gong-neng-shu-zi-zhong-de-fpga-shi-xian/IMG_20200926_224703.jpg" alt></p><hr><h4 id="实验感想"><a href="#实验感想" class="headerlink" title="实验感想"></a>实验感想</h4><p>这个实验是由我们两个人一起合作完成的，所以我们在进行代码开发时需要更加注重结构设计和模块划分，这个过程也锻炼了我们的分工合作能力，并且我们会相互检查各自负责测试部分的模块代码，这也在一定程度上保证了我们的项目程序要更加稳定和健壮，并且我们的设计是从用户使用体验出发的，很多细微之处的设计也倾注了我们很大的心血。</p><p>这次实验不仅极大提高了我们对<code>verilog</code>项目的开发能力，还极大锻炼了我们的分工合作能力，收获很大。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>YoloV1~V4系列论文盘点</title>
      <link href="/2020/06/29/yolov1-v4-xi-lie-lun-wen-pan-dian/"/>
      <url>/2020/06/29/yolov1-v4-xi-lie-lun-wen-pan-dian/</url>
      
        <content type="html"><![CDATA[<h3 id="YoloV1-V4系列论文盘点"><a href="#YoloV1-V4系列论文盘点" class="headerlink" title="YoloV1~V4系列论文盘点"></a>YoloV1~V4系列论文盘点</h3><hr><h4 id="YoloV1-You-Only-Look-Once-Unified-Real-Time-Object-Detection"><a href="#YoloV1-You-Only-Look-Once-Unified-Real-Time-Object-Detection" class="headerlink" title="YoloV1~You Only Look Once: Unified, Real-Time Object Detection"></a>YoloV1~You Only Look Once: Unified, Real-Time Object Detection</h4><h5 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h5><p>本文最初推出Yolo检测框架，它将检测问题定义为边界框和类别概率在全图上的回归问题，单网络单词评估预测结果，可以端对端优化。</p><p>标准Yolo框架检测速度：$45fps/s$</p><p>小版本Fast Yolo检测框架速度：$155fps/s$       检测map:其他实时检测框架的两倍</p><p>总体评价：与最先进的检测框架相比，Yolo检测框架会犯更多的定位错误，但是对背景预测更好（相比于Fast R-CNN，见下文），并且泛化能力更好（处理艺术品检测等问题）。</p><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>传统的检测框架是基于分类方法的，DPM在整张图片上滑动窗口，RCNN通过生成区域建议，再对这些区域进行分类，而YOLO直接在整张图上面进行多个边界框和它们类别概率的回归，对图片only look once，有以下特点：</p><p>![Yolo算法流程](YoloV1-V4系列论文盘点/批注 2020-06-29 091549.png)</p><p>1，快，在GPU上达到每秒45帧，快速版达到150帧，可以实时处理视频，延时低于20秒，精度是其他实时系统的2倍<br>2，由于YOLO在全局上处理图片，所以能看到图片整体的一个联系，所以很少出现背景错误（而像Fast-Rcnn这些基于区域建议的检测框架就经常将背景当做了检测对象）<br>3，精确度不足，特别是小物体的定位</p><h5 id="Unified-Datection"><a href="#Unified-Datection" class="headerlink" title="Unified Datection"></a>Unified Datection</h5><p>Yolo检测系统将输入图像划分为$S<em>S$个格子，以物体中心落在哪个格子划分物体的归属（哪个格子执行检测），每个格子预测$B$个边界框以及它们的置信度，置信度的定义：$confidence=Pr(Object)</em>IOU^{truth}_{pred}$</p><p>置信度反映对于边界框包含一个物体和对边界4框预测准确程度的自信程度。</p><p>每个边界框预测5个项：$x,y,w,h,confidence$</p><p>$(x,y)$表示边界框的中心相对于格子的偏移程度    $w,h$表示相对于全图的宽度和高度</p><p>每个格子预测C个条件概率$Pr(Class_i|Object)$</p><p>推理时：</p><p>$Pr(Class_i|Object)<em>Pr(Object)</em>IOU^{truth}<em>{pred}=Pr(Class_i)*IOU^{truth}</em>{pred}$</p><p>这给出了每个边界框的类特别概率</p><p><img src="/2020/06/29/yolov1-v4-xi-lie-lun-wen-pan-dian/YoloV1%E7%BB%9F%E4%B8%80%E8%AE%AD%E7%BB%83.png" alt="YoloV1统一训练"></p><h6 id="Network-Design"><a href="#Network-Design" class="headerlink" title="Network Design"></a>Network Design</h6><p>我们网络架构如下，网络包含24个卷积层和2个全连接层，并在网络中间使用$1*1$卷积减少前层的特征空间：</p><p>![YoloV1网络架构](YoloV1-V4系列论文盘点/批注 2020-06-30 084035.png)</p><p>fast Yolo版本只用了9个卷积层和更少的滤波器。</p><h6 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h6><p>先使用上述图中的前20层连接全连接层在ImageNet数据集上进行预训练</p><p>再通过连接4个卷积层和2个全连接层转化为检测任务（有研究显示同时添加卷积层和全连接层有助于提升预训练网络性能）</p><p>$x,y,w,h$都是经过了归一化的</p><p>除了最后一层，其它层都使用修正的relu函数：</p><p>![修正的relu函数](YoloV1-V4系列论文盘点/批注 2020-06-30 111734.png)</p><p><strong>损失函数</strong>：</p><p>![损失函数](YoloV1-V4系列论文盘点/批注 2020-06-30 112018.png)</p><ul><li>很多grid不含有物体，会使得confidence为0，这里一般会使得这些单元的梯度超出那些含有物体的，使得模型不稳定，因此提升坐标损失，降低不含物体的置信度损失，通过设定$λ<em>{coord}=5,λ</em>{noobj}=0.5$实现</li><li>小的偏移在小边界框中比在大边界框中严重，所以对w,h取平方根</li><li>采取非极大值抑制，只有与物体groundtruth具有最高IOU的bounding box是这个物体的责任检测器（responsible predictor）</li><li>loss函数中$1^{obj}<em>i$表明物体出现在cell i（以物体中心判断的）,$1^{obj}</em>{ij}$表明第i个格子的第j个边界框是这个物体的责任检测器</li></ul><p>因此当物体出现在格子中，只惩罚分类错误；当边界框是物体的责任检测器只惩罚坐标错误</p><h6 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h6><ul><li>快</li><li>大物体检测效果比较好</li></ul><h6 id="Limitations-of-YOLO"><a href="#Limitations-of-YOLO" class="headerlink" title="Limitations of YOLO"></a>Limitations of YOLO</h6><ul><li>每个格子预测两个边界框会限制检测成群的小物体</li><li>从数据预测边界框限制推广到新的高宽比，多个下采样层是的特征相对粗糙</li><li>错误主要来源是不正确的定位</li></ul><h5 id="Comparison-to-Other-Detection-Systems"><a href="#Comparison-to-Other-Detection-Systems" class="headerlink" title="Comparison to Other Detection Systems"></a>Comparison to Other Detection Systems</h5><h6 id="DPM"><a href="#DPM" class="headerlink" title="DPM"></a>DPM</h6><p>使用滑动窗口</p><p>多个不相交的过程：提取静态特征，分类区域，为高得分区域预测边界框</p><p>Yolo使用一个简单的卷积神经网络替代这些部件</p><h6 id="RCNN"><a href="#RCNN" class="headerlink" title="RCNN"></a>RCNN</h6><p>使用区域建议探测物体</p><p>Selective Search产生潜在区域，卷积神经提取特征，SVM为这些边界框打分，线性模型调整边界框，非极大抑制消除重复区域（慢，40s per image）</p><p>Selective Search大概生成2000个边界框/图，Yolo大概生成98个边界框/图</p><h6 id="Other-Fast-Detectors"><a href="#Other-Fast-Detectors" class="headerlink" title="Other Fast Detectors"></a>Other Fast Detectors</h6><p>利用卷积网络共享计算代替Selective Search加速，但是实现实时还差一点</p><h6 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h6><ul><li>Deep MultiBox</li><li>Deep MultiBox</li><li>MultiGrasp</li></ul><h4 id="YOLO9000-Better-Faster-Stronger"><a href="#YOLO9000-Better-Faster-Stronger" class="headerlink" title="YOLO9000: Better, Faster, Stronger"></a>YOLO9000: Better, Faster, Stronger</h4><h5 id="Abstract-1"><a href="#Abstract-1" class="headerlink" title="Abstract"></a>Abstract</h5><p>$VOC 2007$检测结果：67$FPS$ : 76.8$mAP$    40$FPS$ : 78.6$mAP$</p><p>亮点：</p><ul><li>多尺度训练方法</li><li>物体检测和分类联合训练，可以探测没有标注检测数据的物体类别</li><li>可以检测超过9000种物体，依旧实时</li></ul><h5 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h5><p>现有的检测算法只能涵盖一小部分物体</p><p>无论是现在还是未来，检测数据集都难以达到分类数据集的量级</p><p>idea:利用现有的大量分类数据拓宽检测系统的范畴，使用物体分类的层次视图，允许我们将不同的数据集组合起来</p><p>提出一种联合训练的算法允许基于检测和分类数据训练物体检测器，检测数据来学习精确定位目标，分类数据增加词汇量和鲁棒性</p><h5 id="Better"><a href="#Better" class="headerlink" title="Better"></a>Better</h5><p>Yolo与其他最先进的检测器相比，定位错误较多，召回率较低。</p><p>我们简化网络使其更容易表征学习，集合各种想法来提升YOLO的表现：</p><p>![The path from YOLO to YOLOv2](YoloV1-V4系列论文盘点/批注 2020-07-05 133346.png)</p>]]></content>
      
      
      <categories>
          
          <category> Deeplearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> Yolo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO数据传输设计大作业报告</title>
      <link href="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/"/>
      <url>/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="IO接口设计大作业报告"><a href="#IO接口设计大作业报告" class="headerlink" title="IO接口设计大作业报告"></a>IO接口设计大作业报告</h3><p><code>班级:电信1803</code>    <code>学号:U201813381</code>    <code>姓名:吴栋</code></p><h4 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h4><p>基于嵌入式<code>MicroBlaze</code>微处理器设计一个同时支持多种并行<code>IO</code>设备工作的嵌入式<code>MIMO</code>系统。该系统的基本输入输出设备有：16个独立<code>LED</code>灯，16个独立开关、5个独立按键，4个七段数码管，外设接口电路如图1所示。要求所有外设都通过<code>GPIO</code>连接到<code>MicroBlaze</code>微处理器构成的计算机系统的同一总线上。通过多种IO数据传输控制方式同时实现以下功能：</p><ul><li><p>16个LED灯走马灯式轮流循环亮灭。且循环速度可通过两个独立按键步进控制，其中一个按键每按一次步进增速，另一个按键每按一次步进减速。</p></li><li><p>4个七段数码管实时显示16位独立开关表示的十六进制数。</p></li></ul><p>IO数据传输控制方式分为以下几种：</p><ul><li><p>程序控制方式（要求不能与教材或视频设计方案完全一致）</p></li><li><p>普通中断方式（要求不能与教材或视频设计方案完全一致）</p></li><li><p>快速中断方式（要求不能与教材或视频设计方案完全一致）</p></li></ul><p>分别设计接口电路和各种控制方式下的控制程序（要求设计程序框架结构、各个函数之间的关联关系、各个函数的执行流程图并说明原因、写出程序源代码），并讨论和比较各种控制方式控制程序设计的优缺点和可能出现的实验现象和成因分析。（如在什么情况下可能出现对按键或开关状态不能及时响应，原因是什么？如何改进？）</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/82993f84eb81884ae7cca769fdd7cb1b.png" alt="图1 IO外设部件图"></p><hr><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><ol><li>深入了解<code>GPIO IP核</code>的工作原理和使用方法</li><li>深入了解七段数码管、独立LED灯等IO设备的工作原理和使用方法</li><li>掌握基于程序查询方式的IO数据传输控制方式</li><li>掌握基于中断方式的IO数据传输控制方式，包括普通中断方式和快速中断方式</li></ol><hr><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><ol><li><code>Windows10</code>操作系统</li><li>程序编辑工具：<code>Notepad++</code></li><li>Board Design平台:<code>Vivado</code></li></ol><hr><h4 id="基于程序控制方式的设计方案"><a href="#基于程序控制方式的设计方案" class="headerlink" title="基于程序控制方式的设计方案"></a>基于程序控制方式的设计方案</h4><h5 id="接口电路连接"><a href="#接口电路连接" class="headerlink" title="接口电路连接"></a>接口电路连接</h5><p><code>GPIO IP核</code>有两个通道，且每个通道都可以达到32位，各个引脚可分别独立控制在输入或输出工作状态，这里为节约实验资源，我们只选用一个<code>GPIO IP核</code>，其中<code>GPIO IP核</code>通道1的低16位引脚连接16个独立<code>LED</code>灯，为输出方向，配置为0；高16位引脚连接16位独立开关，为输入方向，配置为1；<code>GPIO核</code>通道2的引脚$IO[0]$至$IO[3]$连接七段数码管位选端，$IO[8]$至$IO[15]$连接七段数码管段选端，为输出方向，配置为0；$IO[16]$至$IO[17]$连接独立按键，为输入方向，配置为1；其他位为无效位。具体连接电路如下所示：</p><p>![图2 程序查询方式电路连接图](IO数据传输设计大作业报告/批注 2020-06-03 085536.png)</p><h5 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h5><p>根据实验任务的功能要求，因为16个<code>LED</code>灯需要走马灯式轮流循环亮灭，因此任意两个相邻<code>LED</code>灯点亮间需要一个延时函数，又因为需要通过两个独立按键步进控制循环速度，因此程序需要不断读取按键的状态，并根据按键的状态去改变延时的间隔，另外4个七段数码管实时显示16位独立开关表示的十六进制数，因此程序还需要不断循环读取开关的状态，并且通过一定的机制转化成4个七段数码管的输出，由于七段数码管各位是逐一点亮，我们还需要设计一个延时函数。</p><p>此处的延时均采用软件延时实现，七段扫描数码管利用了人眼的视觉暂留效应，而人眼的极限分辨评率为$25Hz$，这里有4个七段数码管，那么扫描频率应大于$25*4=100Hz$，我们这里设定扫描频率为$200Hz$，即每两个相邻数码管点亮需要间隔$5ms$，而相应的流水灯的闪烁频率就应该低于$25Hz$，由于实验要求闪烁频率可调节，我们这里只设定初始的基频为$2Hz$,即每两个相邻LED灯点亮需要间隔$500ms$。</p><p>如果简单将实验的两个主题功能采用两个独立的循环来检测，由于各自循环中都含有软件延时操作，会相对较长时间地占据<code>CPU</code>资源，无法及时响应另外一边的开关或者按键的响应状态。特别是流水灯的延时函数会很长时间地占用<code>CPU</code>，导致开关状态的变化很可能无法及时反映到七段数码管上，我们这里将这两个程序联系起来，由于<code>LED</code>间隔延时长（初始化设置为$500ms$）于数码管的扫描周期（初始化设置为$4*5=20ms$），我们通过不断执行数码管的扫描已达到<code>LED</code>要求的延时间隔，若不考虑单条指令延时，根据我们上面对两个时间间隔的计算，我们设定初始时一个led延时间隔执行$500/20=25$遍四位七段数码管扫描，并且为不因为视觉效应而产生多位流水灯同时亮的情况，流水灯的闪烁频率应该不高于$25Hz$，即延时时长应该不小于$40ms$，这刚好是四位七段数码管扫描周期的两倍，我们规定第一个独立按键按下则<code>LED</code>流水灯加速，第二个独立按键按下则流水灯减速，当闪烁频率达到最大$25Hz$时，不再增速。另外我们在每一位数码管扫描前都会检测开关和按键的状态，这是为了尽可能实时反映开关状态，并且不错过按键的状态。具体流程图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/IO%E5%A4%A7%E4%BD%9C%E4%B8%9A%E7%A8%8B%E5%BA%8F%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="图3 程序查询方式流程图"></p><p>更多实现细节可见下面的程序设计及代码注释，这里数码管的延时函数是采用空循环实现的，由于不同微处理器执行指令的速度不一，延时$5ms$需要执行的循环次数工程上具体调节设定，这里设定为$10000$。具体程序设计如下：</p><pre class=" language-c++"><code class="language-c++">#define XPAR_GPIO_BASEADDR 0x40000000    /*GPIO核的基地址*/#define XGPIO_DATA_OFFSET 0x0    /*通道GPIO_IO数据寄存器偏移地址*/#define XGPIO_TRI_OFFSET 0x4    /*通道GPIO_IO传输方向控制寄存器偏移地址*/#define XGPIO_DATA2_OFFSET 0x8    /*通道GPIO2_IO数据寄存器偏移地址*/#define XGPIO_TRI2_OFFSET 0xc    /*通道GPIO2_IO传输方向控制寄存器偏移地址*/int multiple=25;    //流水灯的间隔延时和数码管一个扫描周期的倍率关系short segtable[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,    0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};//七段数码管十六进制数字段码表,定义为short类型，方便后续拼接时的左移操作char poscode[4]={0x0e,0x0d,0x0b,0x07};    //4位七段数码管位码，低位~高位依次存储void digit_delay(){    //数码管扫描显示延时(5ms)    for(int i=0;i<10000;i++)}void led_delay(){    //LED灯显示时延    for(int i=0;i<multiple;i++){        for(int j=0;j<4;j++){            int button=(xil_In32(XPAR_GPIO_BASEADDR + XGPIO_DATA2_OFFSET) >> 16) & 0x3;                //取出两位独立按键的键值            switch(button){            case 0x1: (multiple>2)?(multiple--):(multiple=multiple);            //第一个独立按键按下则led流水灯加速，这里multiple=2是流水灯的速度上限            case 0x2: multiple++;    //第二个独立按键按下则流水灯减速            }            key = (xil_In32(XPAR_GPIO_BASEADDR + XGPIO_DATA_OFFSET) >> 16) & 0xffff;                //取出16位独立开关的键值            index = key>>(4*j) & 0xf;    //提取数位(j+1)上的数字            short combined_code=(seg_table[index] << 8) | poscode[j]);                //第(j+1)位数码管显示时的段码和位码的组合码，这里的数码管刷新顺序是从低位往高位即从左往右            xil_Out16(XPAR_GPIO_BASEADDR + XGPIO_DATA2_OFFSET,combined_code);            digit_delay();    //数码管延时        }    }}int main(){    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_TRI_OFFSET,0xffff0000);        //GPIO核通道1低16位引脚连接16个独立LED灯，为输出方向，配置为0；高16位引脚连接16位独立开关，为输入方向，配置为1    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_TRI2_OFFSET,0x30000);        //GPIO核通道2的引脚I/O[0]~I/O[3]连接七段数码管位选端，I/O[8]~I/O[15]连接七段数码管段选端，为输出       方向，配置为0；I/O[16]~I/O[17]连接独立按键，为输入方向，配置为1；其他位为无效位。    while(1){        unsigned short ledcode = 0x1;        for(int i=0;i<16;i++){            xil_Out16(XPAR_GPIO_BASEADDR + XGPIO_DATA_OFFSET,ledcode<<i);    //点亮第i盏LED            led_delay();    //LED灯显示时延        }    }    return 0;}</code></pre><p>我们知道由于按键之于开关，状态维持时间极短（因为往往按下就会复位），倘若这个保持时间仍然低于数码管延时时间$5ms$，那么当<code>CPU</code>在跑数码管延时循环时，仍然有可能错过按键状态的改变，针对这样，我们可以在数码管延时函数<code>digit_delay()</code>中跑按键检测的指令，倘若检测到按键状态改变仍然可以及时修改全局变量<code>multiple</code>，当然，循环的次数仍然需要工程实际设定，这里简单设为$10000$。</p><pre class=" language-c++"><code class="language-c++">void digit_delay(){    //数码管扫描显示延时(5ms)修改后的函数    for(int i=0;i<10000;i++){        int button=(xil_In32(XPAR_GPIO_BASEADDR + XGPIO_DATA2_OFFSET) >> 16) & 0x3;                //取出两位独立按键的键值            switch(button){            case 0x1: (multiple>2)?(multiple--):(multiple=multiple);            //第一个独立按键按下则led流水灯加速，这里multiple=2是流水灯的速度上限            case 0x2: multiple++;    //第二个独立按键按下则流水灯减速    }}</code></pre><p>当然这里需要按键复位速度相当快，即与指令执行速度相当，否则，单次按键状态改变会被重复检测到，实际中我们可以借鉴这种思路，合理设定检测的频率，并结合空循环，以使得按键能不被错过又不会重复检测到，以达到我们想要的效果。</p><hr><hr><h4 id="基于普通中断方式的设计方案"><a href="#基于普通中断方式的设计方案" class="headerlink" title="基于普通中断方式的设计方案"></a>基于普通中断方式的设计方案</h4><h5 id="接口电路连接-1"><a href="#接口电路连接-1" class="headerlink" title="接口电路连接"></a>接口电路连接</h5><p>我们按照程序查询方案中的分配策略为不同外设分配<code>GPIO</code>引脚，我们仍然只采用一个<code>GPIO IP核</code>，其中<code>GPIO IP核</code>通道1的低16位引脚连接16个独立<code>LED</code>灯，为输出方向，配置为0；高16位引脚连接16位独立开关，为输入方向，配置为1；<code>GPIO核</code>通道2的引脚$IO[0]$至$IO[3]$连接七段数码管位选端，$IO[8]$至$IO[15]$连接七段数码管段选端，为输出方向，配置为0；$IO[16]$至$IO[17]$连接独立按键，为输入方向，配置为1；其他位为无效位。另外我们对于数码管和流水灯的延时不再采用软件延时，而是采取硬件定时中断，这里需要利用到一个<code>Timer IP核</code>的$T_0$和$T_1$定时器。这个事例中有4个中断源，其中开关、按键共用一个<code>GPIO IP核</code>，$T_0$、$T_1$共有一个<code>定时器IP核</code>，对于<code>中断控制器INTC</code>就是两个中断源，将<code>GPIO</code>的中断输出和<code>Timer</code>的中断输出分别连接到<code>INTC</code>的$Intr_0$，$Intr_1$引脚，中断控制器的中断请求输出再通过<code>interrupt总线</code>连接到<code>MicroBlaze微处理器</code>的中断输入总线上。具体连接电路如下所示：</p><p>![图4 普通中断方式电路连接图](IO数据传输设计大作业报告/批注 2020-06-04 144135.png)</p><h5 id="程序设计-1"><a href="#程序设计-1" class="headerlink" title="程序设计"></a>程序设计</h5><p>针对事例中四个中断源设计四个中断事务处理函数，$T_0$中断事务处理函数、$T_1$中断事务处理函数、开关中断事务处理函数以及按键中断事务处理函数，而对于中断控制器仅有<code>GPIO</code>和<code>Timer</code>两个中断源，即总中断服务程序只能直接识别中断源选择性调用<code>GPIO</code>中断事务处理函数、<code>Timer</code>中断事务处理函数，再由这两个中断事务处理函数去分别识别中断源选择性调用开关、按键中断事务处理函数（<code>GPIO</code>）或者是$T_0$、$T_1$中断事务处理函数（<code>Timer</code>），在普通中断模式下，调用中断事务处理函数后，无论是<code>Intc</code>还是<code>GPIO</code>和<code>Timer</code>的中断请求状态都需要手动清除。中断服务程序要能被微处理器硬件中断调用要求启用中断系统，这部分需要在主程序实现，我们需要在主程序中实现<code>GPIO</code>、<code>Timer</code>、中断控制器初始化，程序结构图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE12.png" alt="图5 普通中断方式的程序结构图"></p><p>我们使用类似公司的职位管理图来表示各个函数之间的关系，特别要注意的是主函数与总中断服务程序之间是平级关系，它们是互不调用的,而总中断服务程序为<code>GPIO</code>中断事务处理函数和<code>Timer</code>中断事务处理函数的上级，<code>GPIO</code>中断事务处理函数是开关中断事务处理函数和按键中断事务处理函数的上级，<code>Timer</code>中断事务处理函数是$T_0$中断事务处理函数和$T_1$中断事务处理函数的上级，函数被且只被其直接上级调用。</p><h6 id="宏定义、函数声明、全局变量设置"><a href="#宏定义、函数声明、全局变量设置" class="headerlink" title="宏定义、函数声明、全局变量设置"></a>宏定义、函数声明、全局变量设置</h6><p>为了程序便于阅读，程序编程风格上采取宏定义方式，具体宏定义可以自行参阅华中科技大学左冬红老师的《计算机组成原理与接口技术》，现将宏定义封装好的头文件在下列引出。</p><p>除了主程序，我们还声明了7个程序，其中<code>My_ISR()</code>注册为了总中断服务程序，其他几个为具体的中断事务程序，是通过总中断服务程序直接或者间接调用的，我们在上文已经基本叙述，具体每一块的功能下文会有详细的叙述。</p><p>我们还定义了五个全局变量，段码表<code>segtable</code>、段码缓存区<code>segcode</code>、位码缓存区<code>poscode</code>、以及流水灯当前点亮位置<code>ledbits</code>、数码管当前刷新位置<code>pos</code>，定义为全局变量是方便整个大程序运行过程中方便在各个程序中都能查询修改，实现信息交互，并保留状态。</p><pre class=" language-c++"><code class="language-c++">#include "xil_io.h"#include "stdio.h"#include "xintc_1.h"#include "xtmrctr_1.h"#include "xgpio_1.h"#define RESET_VALUE0    100000000-2#define RESET_VALUE1    100000-2#define STEP_PACE     10000000#define XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK 0x000001U#define XPAR_AXI_TIMER_0_INTERRUPT_MASK 0x000002U    //由于GPIO和Timer IP核与intc的中断事件输入引脚有别于教材，重新宏定义void My_ISR()__attribute__((interrupt_handler)); //注册为总中断服务程序void gpio_handle();void timer_handle();void switch_handle();void button_handle();void timer0_handle();void timer1_handle();char segtable[16]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,    0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e};short segcode[4]={0xc0,0xc0,0xc0,0xc0};char poscode[4]={0x07,0x0b,0x0d,0x0e};int ledbits=0;int pos=0;</code></pre><h6 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h6><p>主函数主要完成<code>GPIO</code>、<code>Timer</code>、<code>中断控制器INTC</code>的初始化设定，其流程如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE2.png" alt="图6 主函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">int main(){    //设置GPIO IP核通道的传输方向    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_TRI_OFFSET,0xffff0000);    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_TRI2_OFFSET,0x30000);    //GPIO中断使能    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_IER_OFFSET,XGPIO_IR_CH1_MASK |     XGPIO_IR_CH2_MASK);        //使能GPIO的两个通道中断    xil_Out32(XPAR_GPIO_BASEADDR + XGPIO_GIE_OFFSET,XGPIO_GIE_ENABLE_MASK);        //使能中断信号ip2intc_irpt输出    //初始化T0    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR +     XTC_TCSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TCSR_OFFSET) &     ~XTC_CSR_ENABLE_TMR_MASK);    //停止计数器运行使能    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TLR_OFFSET,RESET_VALUE0);    //设置计数初值为RESET_VALUE0    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR +     XTC_TCSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TCSR_OFFSET) |     XTC_CSR_LOAD_MASK);    //装载预置值    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TCSR_OFFSET,    (xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TCSR_OFFSET) & ~XTC_CSR_lOAD_MASK) |     XTC_CSR_ENABLE_TMR_MASK | XTC_CSR_AUTO_RELOAD_MASK | XTC_CSR_ENABLE_INT_MASK |     XTC_CSR_DOWN_COUNT_MASK);    //关闭装载、启动计数器运行使能、使能重复装载、使能中断、减计数    //初始化T1    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR +     XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET) & ~XTC_CSR_ENABLE_TMR_MASK);    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TLR_OFFSET,RESET_VALUE1);    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR +     XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET)| XTC_CSR_LOAD_MASK);    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET,    (xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET) &     ~XTC_CSR_lOAD_MASK) | XTC_CSR_ENABLE_TMR_MASK | XTC_CSR_AUTO_RELOAD_MASK |         XTC_CSR_ENABLE_INT_MASK | XTC_CSR_DOWN_COUNT_MASK);    //初始化INTC、开中断    xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IER_OFFSET,XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK |     XPAR_AXI_TIMER_0_INTERRUPT_MASK);        //设置GPIO_0对应的引脚intr[0]，Timer_0对应的引脚intr[1]中断使能    xil_Out32(XPAR_INTC_0_BASEADDR+XIN_MER_OFFSET,XIN_INT_MASTER_ENABLE_MASK |     XIN_INT_HARDWARE_ENABLE_MASK);        //使能INTC中断    microblaze_enable_interrupts();    //使能微处理器中断    return 0;}</code></pre><h6 id="总中断服务程序"><a href="#总中断服务程序" class="headerlink" title="总中断服务程序"></a>总中断服务程序</h6><p>对于<code>INTC</code>存在<code>GPIO</code>和<code>Timer</code>两个中断源，因此总中断服务程序先识别中断源，判断<code>GPIO</code>和<code>Timer</code>有没有发出中断请求，若产生了中断请求就调用对应的中断处理函数，并且统一在程序最后清除<code>INTC</code>中断状态寄存器的中断请求状态，为了充分保证开关和按键状态的实时反映，我们设定<code>GPIO</code>的响应优先级高于<code>Timer</code>。具体流程图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/QQ%E5%9B%BE%E7%89%8720200605114414.png" alt="图7 总中断服务程序流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void My_ISR(){    int status;    status = xil_In32(XPAR_INTC_0_BASEADDR + XIN_ISR_OFFSET);        //读取INTC的状态寄存器    //判断是否是GPIO IP核发出的中断请求    if ((status & XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK) ==    XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK)        gpio_handle();    //判断是否是Timer IP核发出的中断请求    if ((status & XPAR_AXI_TIMER_0_INTERRUPT_MASK) ==    XPAR_AXI_TIMER_0_INTERRUPT_MASK)        timer_handle();    xil_Out32(XPAR_INTC_0_BASEADDR + XIN_IAR_OFFSET);    //清除INTC的中断状态}</code></pre><h6 id="GPIO中断事务处理函数"><a href="#GPIO中断事务处理函数" class="headerlink" title="GPIO中断事务处理函数"></a><code>GPIO</code>中断事务处理函数</h6><p>对于<code>GPIO</code>存在开关和按键两个中断源，因此程序先是识别中断源，判断开关和按键有没有发出中断请求，若产生了中断请求就调用对应的中断处理函数，并且统一在程序最后写中断寄存器清除中断状态，为了照顾开关状态要求的实时反映，我们设定开关中断的响应优先级高于按键的响应优先级。具体流程图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE4.png" alt="图8 GPIO中断事务处理函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void gpio_handle(){    int status;    status = xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_ISR_OFFSET);    //判断是否是开关导致的中断    if ((status & XGPIO_IR_CH1_MASK) == XGPIO_IR_CH1_MASK){        switch_handle();        xil_Out32(XPAR_AXI_GPIO_0_BASEADDR +         XGPIO_ISR_OFFSET,xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_ISR_OFFSET) &         XGPIO_IR_CH1_MASK);    //判断是否是按键导致的中断    if ((status & XGPIO_IR_CH1_MASK) == XGPIO_IR_CH2_MASK){        button_handle();    xil_Out32(XPAR_AXI_GPIO_0_BASEADDR +     XGPIO_ISR_OFFSET,xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_ISR_OFFSET) &     (XGPIO_IR_CH1_MASK | XGPIO_IR_CH2_MASK));    //清除GPIO通道1、2的中断状态}</code></pre><h6 id="Timer中断事务处理函数"><a href="#Timer中断事务处理函数" class="headerlink" title="Timer中断事务处理函数"></a><code>Timer</code>中断事务处理函数</h6><p>对于<code>Timer</code>存在$T_0$和$T_1$两个中断源，因此程序先是识别中断源，判断定时器$T_0$和$T_1$有没有发出中断请求，若产生了中断请求就调用对应的中断处理函数，并且分别在子函数返回后写定时器的<code>TxINT</code>寄存器已清除定时器的中断请求状态，注意这里读取状态和清除状态都需要分开进行，因为$T_0$和$T_1$对应寄存器的地址并不相同，这里我们设定$T_0$中断的响应优先级高于$T_1$中断的响应优先级。具体流程图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE19.png" alt="图9 Timer中断事务处理函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void timer_handle()//定时器中断服务程序{    int status;    //判断是否T0中断    status = xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TCSR_OFFSET);        //读T0计数器的中断状态    if((status & XTC_CSR_INT_OCCURED_MASK) == XTC_CSR_INT_OCCURED_MASK)        timer0_handle();    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR +     XTC_TXSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TXSR_OFFSET))；        //清除T0中断状态    //判断是否T1中断    status=xil_In32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +     XTC_TCSR_OFFSET);    //读T1计数器的中断状态    if((status&XTC_CSR_INT_OCCURED_MASK) == XTC_CSR_INT_OCCURED_MASK)        timer1_handle();    xil_Out32(XPAR_AXI_TIMER_0_BASEADDR + XTC_TIMER_COUNTER_OFFSET +    XTC_TXSR_OFFSET,xil_In32(XPAR_AXI_TIMER_0_BASEADDR +    XTC_TIMER_COUNTER_OFFSET +     XTC_TXSR_OFFSET));        //清除T1中断状态}</code></pre><h6 id="开关中断事务处理函数"><a href="#开关中断事务处理函数" class="headerlink" title="开关中断事务处理函数"></a>开关中断事务处理函数</h6><p>开关中断事务处理函数主要完成读取开关值、并将其更新到数码管的显示缓冲区，其主要流程如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE31.png" alt="图10 开关中断事务处理函数"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void switch_handle(){    short hex = (xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_DATA_OFFSET) >> 16) & 0xffff;    //读取开关状态    int segcode_index = 3;    for(int digit_index=0;digit_index<4;digit_index++)    {        segcode[segcode_index] = segtable[(hex >> (4*digit_index)) & 0xf];        segcode_index--;    }    //根据开关状态更新段码缓冲区}</code></pre><h6 id="按键中断事务处理函数"><a href="#按键中断事务处理函数" class="headerlink" title="按键中断事务处理函数"></a>按键中断事务处理函数</h6><p>按键控制走马灯的速度，这是通过修改应对走马灯延时定时器$T_0$的预置装载值<code>RESET_VALUE0</code>来实现的，如果按下快进键就减小这个预置值，反之就增大这个预置值，具体流程如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE35.png" alt="图11 按键中断事务处理函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void button_handle(){    int button;    button = (xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_DATA2_OFFSET) >> 16) & 0X3;    switch(button){    case 0x1: xil_Out32(XPAR_AXI_TIMER_0_BASEADDR +                XTC_TLR_OFFSET,xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XTC_TLR_OFFSET)              - STEP_PACE);    //第一个独立按键按下则led流水灯加速，即计数数值减小    case 0x2: xil_Out32(XPAR_AXI_TIMER_0_BASEADDR +               XTC_TLR_OFFSET,xil_In32(XPAR_AXI_GPIO_0_BASEADDR + XTC_TLR_OFFSET)             - STEP_PACE);    //第二个独立按键按下则led流水灯减速，即计数数值增大    }}</code></pre><p>当然如果还是为了防止我们在程序查询方法里面说到的流水灯多个灯亮的情况，依旧可以在加速按键按下后先判断这时的预置装载值是否已经达到某一阈值，若已经到达就不能再减小这个预置装载值。</p><h6 id="T-0-中断事务处理函数"><a href="#T-0-中断事务处理函数" class="headerlink" title="$T_0$中断事务处理函数"></a>$T_0$中断事务处理函数</h6><p>$T_0$中断事务处理函数功能为点亮下一盏<code>LED</code>灯，如果已经是最后一盏灯就从头开始，具体流程如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE37.png" alt="图12 T0中断事务处理函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void timer0_handle()    (lebits == 15) ? lebits=0 : lebits++;    xil_Out16(XPAR_AXI_GPIO_0_BASEADDR + XGPIO_DATA2_OFFSET,1<<lebits);        //点亮第lebits+1盏LED灯}</code></pre><h6 id="T-1-中断事务处理函数"><a href="#T-1-中断事务处理函数" class="headerlink" title="$T_1$中断事务处理函数"></a>$T_1$中断事务处理函数</h6><p>$T_1$中断事务处理函数功能为点亮当前位置数码管，并将扫描位置修改为下一位，具体流程如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE41.png" alt="图13 T1中断事务处理函数流程图"></p><p>具体实现细节参见代码及其注释：</p><pre class=" language-c++"><code class="language-c++">void timer1_handle(){    short combined_code=(seg_table[pos] << 8) | poscode[pos]);    xil_Out16(XPAR_AXI_GPIO_0_BASEADDR+XGPIO_DATA2_OFFSET,combined_code);    //点亮第pos+1位七段数码管    (pos == 3) ? pos=0 : pos++;}</code></pre><hr><hr><h4 id="基于快速中断方式的设计方案"><a href="#基于快速中断方式的设计方案" class="headerlink" title="基于快速中断方式的设计方案"></a>基于快速中断方式的设计方案</h4><h5 id="接口电路连接-2"><a href="#接口电路连接-2" class="headerlink" title="接口电路连接"></a>接口电路连接</h5><p>基于快速中断方式的电路连接与普通中断方式基本一样，除了将<code>INTC</code>的<code>processor_clk</code>、<code>processor_rst</code>与<code>CPU</code>对应时钟信号<code>CPU_Clk</code>、<code>CPU</code>对应复位信号<code>CPU_Reset</code>连接，还要将<code>INTC</code>和微处理器两者的<code>processor_ack</code>及<code>interrupt_address</code>对应引脚连接，<code>CPU</code>通过<code>processor_ack</code>引脚向<code>INTC</code>传达中断响应状态指示信号，<code>INTC</code>通过<code>interrupt_address</code>通道将最高优先级中断源的中断向量送入微处理器。其他连接与普通中断方式连接一致，电路连接如下：</p><p>![图14 快速中断方式电路连接图](IO数据传输设计大作业报告/批注 2020-06-04 152017.png)</p><h5 id="程序设计-2"><a href="#程序设计-2" class="headerlink" title="程序设计"></a>程序设计</h5><p>与普通中断程序不同的是，快速中断模式不需要软件识别<code>INTC</code>的中断源，也不需要在中断事务处理函数返回后手动清除<code>INTC</code>状态寄存器的中断请求状态，那么不再需要总中断服务程序，另外<code>INTC</code>初始化时需要设置对应中断输入引脚为快速中断模式，且需要将中断向量填入<code>INTC</code>的<code>IVAR</code>寄存器。</p><p>与普通中断方式不同的是系统中不再使用总中断服务程序，对于相对与<code>INTC</code>的两个直接中断源，即<code>GPIO</code>和<code>Timer</code>提供独立的中断服务程序，即直接将这两个程序声明为快速中断模式服务程序，当产生中断时，<code>INTC</code>会直接将这两个直接中断源产生中断的且优先级更高的那个的程序入口地址送入微处理器，所以不再需要总中断服务程序对这两个中断源进行识别调用，那么程序结构图如下：</p><p><img src="/2020/06/09/io-shu-ju-chuan-shu-she-ji-da-zuo-ye-bao-gao/%E7%BB%98%E5%9B%BE22.png" alt="图15 快速中断模式程序结构图"></p><p>这是主函数、<code>GPIO</code>中断事务处理函数、<code>Timer</code>中断事务处理函数是平级关系，它们是互不调用的，它们能且只能调用它们的直接下级。</p><h6 id="函数声明部分的修改"><a href="#函数声明部分的修改" class="headerlink" title="函数声明部分的修改"></a>函数声明部分的修改</h6><p>相对于普通中断方式的程序实现，我们只需要在函数声明部分取消总中断服务程序<code>My_ISR（）</code>的定义和声明，另外我们需要将<code>GPIO</code>和<code>Timer</code>的中断服务程序声明快速中断模式服务程序，修改的部分如下：</p><pre class=" language-c++"><code class="language-c++">void gpio_handle()__attribute__((fast_interrupt));void timer_handle()__attribute__((fast_interrupt));void switch_handle();void button_handle();void timer0_handle();void timer1_handle();</code></pre><h6 id="主函数INTC初始化的修改"><a href="#主函数INTC初始化的修改" class="headerlink" title="主函数INTC初始化的修改"></a>主函数<code>INTC</code>初始化的修改</h6><p>主程序中对于<code>INTC</code>的初始化需要写<code>INTC</code>的<code>IMR</code>寄存器，设置<code>GPIO</code>和<code>Timer</code>接入引脚的$intr[0]$和$intr[1]$</p><p>为快速中断模式，另外还需要写<code>INTC</code>的<code>IVAR</code>寄存器，将<code>GPIO</code>、<code>Timer</code>中断源的中断向量写入，则修改的部分如下：</p><pre class=" language-c++"><code class="language-c++">//初始化INTC、开中断xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IMR_OFFSET,XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK | XPAR_AXI_TIMER_0_INTERRUPT_MASK);//设置GPIO_0对应的引脚intr[0]，Timer_0对应的引脚intr[1]中断模式为快速中断模式    xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IER_OFFSET,XPAR_AXI_GPIO_0_IP2INTC_IRPT_MASK | XPAR_AXI_TIMER_0_INTERRUPT_MASK);    //设置GPIO_0对应的引脚intr[0]，Timer_0对应的引脚intr[1]中断使能xil_Out32(XPAR_INTC_0_BASEADDR+XIN_MER_OFFSET,XIN_INT_MASTER_ENABLE_MASK | XIN_INT_HARDWARE_ENABLE_MASK);        //使能INTC中断xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IVAR_OFFSET+4*XPAR_INTC_0_GPIO_0_VEC_ID(int)gpio_handle);    //将处理GPIO_0的中断服务程序填入中断向量表对应位置    xil_Out32(XPAR_INTC_0_BASEADDR+XIN_IVAR_OFFSET+4*XPAR_INTC_0_TMRCTR_0_VEC_ID,(int)timer_handle);    //将处理Timer_0的中断服务程序填入中断向量表对应位置</code></pre><p>其他部分的程序设计与普通中断模式完全一致，此处不再赘述。</p><hr><h4 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h4><p>通过这个<code>IO</code>接口设计大作业，我对程序查询、普通中断和快速中断这三种<code>IO</code>数据传输方法有了更深的理解，因为在本学期的微机原理课程中，<code>IO</code>接口和中断技术本身属于比较复杂的内容，感谢老师布置的这个大作业，让我们在实际应用中更好地学习和体会这些内容。设计过程中，我仔细重新阅读和观看了教材和网课，最先并未直接观看教材和课件中的解决方法，不过经过仔细思考和每一点的推敲，以及和同学的讨论，最终敲定的解决方案和教学中使用的方案重合性比较大，另外我也研究思考了老师提到的往年实验中学长学姐在实际使用开发板检测时出现的一些问题，并给出了一定的解决方法。</p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO数据传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-6月工作计划及日志</title>
      <link href="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/"/>
      <url>/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="2020-6月工作计划及日志"><a href="#2020-6月工作计划及日志" class="headerlink" title="2020-6月工作计划及日志"></a>2020-6月工作计划及日志</h3><h4 id="六月的计划作息和主要事项"><a href="#六月的计划作息和主要事项" class="headerlink" title="六月的计划作息和主要事项"></a>六月的计划作息和主要事项</h4><h5 id="作息"><a href="#作息" class="headerlink" title="作息"></a>作息</h5><ul><li>7：00     起床</li><li>12：30～13：30    午睡</li><li>11：40    睡觉</li></ul><h5 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h5><ul><li>毛概（6.14）</li><li>信号与系统（6.21）</li><li>微机原理（6.28）</li><li>信息论（延时待定）</li><li>随机过程（延时待定）</li><li>数理方程（返校考试）</li></ul><p>先暂停实验室项目组科研比赛方面的投入，这段时间主要用来完成各课程大作业和实验，并且系统复习。</p><h6 id="学习时间安排"><a href="#学习时间安排" class="headerlink" title="学习时间安排"></a>学习时间安排</h6><ul><li>上午 8：00～9：30    9：50～11：30</li><li>下午 14：00～15：30    15：50～17：30</li><li>晚上 19：00～20：40    21：00～23：00</li></ul><p>时间冲突请自行安排，尽量保证每天接近10小时的高效学习，使用番茄记录打卡。</p><h5 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h5><p>减少约球…</p><ul><li>上肢力量训练</li><li>每周两组5km</li><li>每周1场球</li></ul><h5 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h5><p>少上知乎、微博和推特，多读书…</p><ul><li>《浪潮之巅》</li><li>《鸟叔的linux私房菜》</li></ul><hr><h4 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h4><h5 id="2020-06-04-星期四"><a href="#2020-06-04-星期四" class="headerlink" title="2020-06-04    星期四"></a>2020-06-04    星期四</h5><p>完成了IO实验的code</p><p>接触使用了vivado的board design</p><p>完成正常锻炼和阅读</p><p>预计明天完成大作业报告，并且整理好信号实验报告</p><p>晚上开始毛概复习</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200604234251.jpg" alt="2020_06_04"></p><h5 id="2020-06-05-星期五"><a href="#2020-06-05-星期五" class="headerlink" title="2020-06-05    星期五"></a>2020-06-05    星期五</h5><p>今天早上起得很早，6.14吧，虽然昨晚睡得不怎么样，不过上午状态还是可以的</p><p>下午正常学习，效率还行</p><p>白天效率还是不错吧，基本完成了微机原理的报告（画了n张图）</p><p>晚上打了一场球赛吧，比计划的时间长了好多，主要是路上时间花的太多，完了他们场地还差，框又不标准（完全没篮），虽然砍了30+还是输了两分，想想去年正是这个时候也是在学院打比赛，决赛也是输了两分，也是有点想学校了。</p><p>回来小腿有点抽筋，休息了一会，完了自己炒的螺蛳粉实在是难吃，直接把时间耗完了，随便写了会报告就收工了。</p><p>明天上午无论如何得将微机报告交稿，完成信息论作业后开始复习毛概了。</p><p>这周再去打球我就是狗</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200605234226.jpg" alt="2020_06_05"></p><h5 id="2020-06-06-星期六"><a href="#2020-06-06-星期六" class="headerlink" title="2020-06-06    星期六"></a>2020-06-06    星期六</h5><p>不多说了  我是狗</p><p>忘记打卡  四小时学习</p><p>下午在处理家里的事情</p><h5 id="2020-06-07-星期日"><a href="#2020-06-07-星期日" class="headerlink" title="2020-06-07  星期日"></a>2020-06-07  星期日</h5><p>真就差点忘了。。</p><p>算是差不多完成任务的一天吧</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200607233623.jpg" alt="2020_06_07"></p><p>完了今天听见大学同班朋友退学了，还是蛮吃惊的，害，其实平时我就能感觉到他心理上还是有些小抑郁的，真就也没去认真关心一下，其实这个朋友平时也是蛮敏感的，而且其实感觉这种抑郁一部分也是来自于周边环境和人，以后还是要多注意下周边朋友的一个状态吧，然后也是蛮佩服这个回高三复读的勇气的，至少我如果是他，我可能就不会，蛮多时候我们还是活在大众的期许和设定中的。。。也不想说了，还是希望他一切都好吧，所得皆所期，所失皆无碍。</p><p>毛概教材实在看起来。。。还是开始背单词吧明天，不然一天天得看这个也太无聊了。</p><hr><h4 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h4><h5 id="2020-06-08-星期一"><a href="#2020-06-08-星期一" class="headerlink" title="2020-06-08  星期一"></a>2020-06-08  星期一</h5><p>毕业两周年纪念日。。。</p><p>白天佛系阅读毛概教材（进度：第四章），可能是看的有点细了，也不太想看，看的很慢。</p><p>傍晚出去打了一场球</p><p>晚上回来开始复习信号了（第二章哈哈哈）</p><p>还是要提升一下效率</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200608233802.jpg" alt="2020_06_08"></p><h5 id="2020-06-09-星期二"><a href="#2020-06-09-星期二" class="headerlink" title="2020-06-09  星期二"></a>2020-06-09  星期二</h5><p>又是划水的一天。。。</p><p>幸好早上8点熙哥把我叫醒，帮忙考试，然而做不出</p><p>然后出去跑了一下步，雷子的歌和雨后的上午果真绝了</p><p>回来洗完澡吃过饭开始一天的划水</p><p>明天直接看毛概看点和大题了</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200609233401.jpg" alt="2020_06_09"></p><h5 id="2020-06-10-星期三"><a href="#2020-06-10-星期三" class="headerlink" title="2020-06-10  星期三"></a>2020-06-10  星期三</h5><p>晚起+1</p><p>下午出去练了一会三分</p><p>又是一天的毛概意念阅读大法  明天开始认真看吧哈哈哈</p><p>晚上看了会科技评论</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200610231631.jpg" alt="2020_06_10"></p><h5 id="2020-06-12-星期三"><a href="#2020-06-12-星期三" class="headerlink" title="2020-06-12  星期三"></a>2020-06-12  星期三</h5><p>上午  跑步+毛概复习</p><p>下午 继续毛概复习</p><p>再一次看了盖茨大大和微软帝国的商业史</p><p>晚上  刷了一会CV的论坛，居然YoloV5又问世了</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200612232325.jpg" alt="2020_06_13"></p><hr><h4 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h4><h5 id="2020-06-15-星期一"><a href="#2020-06-15-星期一" class="headerlink" title="2020-06-15  星期一"></a>2020-06-15  星期一</h5><p>睡满9个小时的一天</p><p>晚上拒绝球赛实属不易</p><p>复习了一天信号</p><p>晚上看了一下paper和其他资讯</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200615232947.jpg" alt="2020_06_15"></p><h5 id="2020-06-16-星期二"><a href="#2020-06-16-星期二" class="headerlink" title="2020-06-16  星期二"></a>2020-06-16  星期二</h5><p>熬夜晚起，做早饭吃完就9点半了</p><p>上午信号写题草稿纸搞事情</p><p>晚上和朋友一起跑步</p><p>明天开始刷一下试卷了</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200616232834.jpg" alt="2020_06_16"></p><h5 id="2020-06-17-星期三"><a href="#2020-06-17-星期三" class="headerlink" title="2020-06-17  星期三"></a>2020-06-17  星期三</h5><p>复习信号的一天</p><p>傍晚野球</p><p>晚上大创国家级申报</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200617235309.jpg" alt="2020_06_17"></p><h5 id="2020-06-18-星期四"><a href="#2020-06-18-星期四" class="headerlink" title="2020-06-18  星期四"></a>2020-06-18  星期四</h5><p>又是晚起的一天</p><p>上午到下午3点复习完课件</p><p>之后信号mooc检测和模拟考试</p><p>有点怀疑被搞了</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200618235951.jpg" alt="2020_06_18"></p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200618235940.jpg" alt="2020_06_18"></p><p>2020-06-19  星期五</p><p>写了一天信号题</p><p>也还是有些东西没弄清的</p><p>明天还有好多题要做</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200620000348.jpg" alt="2020_06_19"></p><hr><h4 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h4><h5 id="2020-06-22-星期一"><a href="#2020-06-22-星期一" class="headerlink" title="2020-06-22  星期一"></a>2020-06-22  星期一</h5><p>上午开始复习模数，新一轮的温水煮青蛙</p><p>中午出去吃饭太费时间了</p><p>下午继续复习笔记</p><p>晚上华为云比赛报名+复习笔记</p><p>明天复习还是紧张一点</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200622234759.jpg" alt="2020_06_19"></p><h5 id="2020-06-23-星期二"><a href="#2020-06-23-星期二" class="headerlink" title="2020-06-23  星期二"></a>2020-06-23  星期二</h5><p>今天复习“危机”，看完汇编，微处理器结构，存储系统</p><p>明天要快点过完总线、接口、IO、中断、DMA。。。</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200623233114.jpg" alt="2020_06_23"></p><p>2020-6-30 星期一</p><p>6月份的最后一天</p><p>上午回顾Yolo系列论文，并做了一下博客笔记</p><p>看了ROS的文档（后续要尽快看一下linux私房菜，估计8月份要用ROS开发）</p><p>下午项目组开会</p><p>晚上熟悉华为云modelarts平台和观看教学视频</p><p><img src="/2020/06/03/2020-6-yue-gong-zuo-ji-hua-ji-ri-zhi/QQ%E5%9B%BE%E7%89%8720200630233150.jpg" alt="2020-06-30"></p>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柚子树</title>
      <link href="/2020/05/27/you-zi-shu/"/>
      <url>/2020/05/27/you-zi-shu/</url>
      
        <content type="html"><![CDATA[<p><strong>柚子树</strong></p><p>生长在江南旖旎的画卷里，映入眼帘的是终岁繁茂的林海，荣曜秋菊，华茂春松……但倘若关于树的记忆在脑海中渐渐淡去，最后矗立的一定是那棵柚子树。</p><p>柚子树生长在老家侧坪，不到三米的身高绝对谈不上挺拔，双手一握的树干也难说粗壮，偶尔也会有蚂蚁昆虫顺着那潮湿霉黑的树皮向上爬，心脏形的叶片稀稀疏疏地挂在树梢，阳光穿过叶缝，在地上洒落下斑驳的光点，用脚去踩光点时，就能感受到地皮底下那胡乱生长的伏根。平日里人来来往往，从不见有谁为它驻足，只有爷爷有时会稍稍拨弄。</p><p>去年四月，柚子树在它的第五个年头终于爆出了白花，花期之后，柚子树长出了弹丸大小般的青色小珠，不知什么时候，婴儿头般大小的青黄色果实挂满了枝头，待果实成熟之后，爷爷小心翼翼地用剪刀将它们一一摘取下来，再用早已准备的箱子将它们一一放置好。</p><p><img src="/2020/05/27/you-zi-shu/123.png" alt></p><p>那一次放月假回家，吃完晚饭后，我们一家厅，爷爷捧出先前准备的柚子，笑意盈盈地对我说:“尝尝咱自家的柚子。”只见那枯瘦的手指并不娴熟地操控着水果刀，耐心地剥开、去除白皮、最后一片片地分给我们，素不喜食水果的他破天荒地吃了几片，仍觉柚子清香在口的我听到爷爷念叨:“树是我和你奶奶一起种的，我吃到了，你奶奶就没吃到。”这时爷爷干枯的眼时湿润了……爷爷与奶奶的相遇，没有期许中的青梅竹马或是一见钟情，完全是传统婚恋下的父母之命，媒妁之言，谈不上天作之合，两人却相互扶持走过了大半辈子，爷爷年轻时念过不少书，为人严肃古板，处事正直公道，奶奶没有读过多少书，脾气温和，待人善良，当地人对爷爷是深深的敬畏，对奶奶是发自内心的敬爱。但在家中，两人总能相互忍让，迁就，在爷爷奶奶携手走过的半个世纪中几乎没有过争吵。记得上我小学初中时，爷爷和奶奶总是一同早早起来，为我做好早饭，望着我的背影直到谈去视线，又赶紧温好他们的早粥。傍晚放学时，在的夕阳下，爷爷与奶奶端坐在门口等我回家。有时爷爷在菜地里劳作，奶奶会将可口的饭茶端上桌后，再轻轻呼唤爷爷……似乎所有都停在了 14年的冬天，腊月 18日，奶奶第一次发病，爷爷将奶奶紧紧抱着，直到医院才肯放下，或许是老天爷被感动，爷爷这一次留住了奶奶。但在两天后，从医院回来的两人照旧早早起来，两人在说了许久话，准备吃完早饭前往医院时，奶奶突然病发了，奶奶用手紧紧攥着爷爷，直到最后一刻也没放开，这次爷爷没有留住奶奶，两人早上的谈话成了命中的告别。那是我第一次看见泪水在爷爷脸上纵横，刚强了一辈子的老人在那刻哭得像个孩子。奶奶丧事期间，知晓爷爷奶奶感情的亲友都交代我注意爷爷，爷爷却告诉我他没事，劝我到灵堂中多陪陪奶奶。奶奶丧事结束后，爷爷将奶奶遗像擦拭干净后，放在了看不见的柜顶。有时夜里爷爷会点灯独坐着，会隔一定的时间去清理奶奶坟头的杂草，有时累了会在坟头抽上一支烟。</p><p><img src="/2020/05/27/you-zi-shu/068535498d174de6bfc4593133203338.jpeg" alt></p><p><img src="/2020/05/27/you-zi-shu/a4d017c23c3f4d30a2776dd67a3699e9.jpeg" alt></p><p>我懂得了爷爷悉心照料柚子树的原因，一花一世界，一叶一追寻，花自有意，树自深情，如归有光庭前的枇杷，“庭有枇杷树，吾妻死之年所手植，今已亭亭如盖。”如邓颖超家的海棠，“你不是喜爱海棠花吗？解放初期，你偶然看到了这海棠花盛开的院落，就爱上了海棠花。也就爱上了这个院落，到这个盛开着海棠花的院落来居住。你住了整整二十六年，我住的比你还长，到现在已经是三十八年了！”亦如苏轼在亡妻王弗死后封笔三年，所种下的万顷松海，“老翁山下玉渊回，手植青松三万栽”。</p><p>那些树儿早已深深扎根在他们心中，那些树荫在他们记忆的最深处洒落出他们所爱之人的影子。任由叶子投射出那些永远青翠的时光，任由根儿诉说那些始终蔓延的思念。</p><p><img src="/2020/05/27/you-zi-shu/u=1483547738,4211958046&fm=26&gp=0.jpg" alt></p><p>那是属于老者们的爱情，或许没有开始时适逢其会，猝不及防；但却也没有最后的花开两朵，天各一方。或许说不上轰轰烈烈，却是细水流长。或许没人与你琼湖歌月，长醉倚楼，但却有人与你立黄昏，有人问你粥可温。</p><p>风华是一指流砂，苍老是一段年华。夜雨染成天水碧。有些感情不需要姿态，也能成就一场惊鸿。谈一场以结婚为目的的恋爱，选择了就不再放弃，荏苒时光过往，韶华倾付，也有岁月可回首，且以深情告白头。</p><p>望望庭前的柚子树，似乎愈发青翠……</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从ShuffleNet论文入手盘点轻量级网络（原创）</title>
      <link href="/2020/05/03/cong-shufflenet-lun-wen-ru-shou-pan-dian-qing-liang-ji-wang-luo-yuan-chuang/"/>
      <url>/2020/05/03/cong-shufflenet-lun-wen-ru-shou-pan-dian-qing-liang-ji-wang-luo-yuan-chuang/</url>
      
        <content type="html"><![CDATA[<h2 id="从ShuffleNet论文入手盘点轻量级网络（原创）（未完待续）"><a href="#从ShuffleNet论文入手盘点轻量级网络（原创）（未完待续）" class="headerlink" title="从ShuffleNet论文入手盘点轻量级网络（原创）（未完待续）"></a>从ShuffleNet论文入手盘点轻量级网络（原创）（未完待续）</h2><hr><h3 id="ShuffleNetV1-An-Extremely-Efficient-Convolutional-Neural-Network-for-Mobile"><a href="#ShuffleNetV1-An-Extremely-Efficient-Convolutional-Neural-Network-for-Mobile" class="headerlink" title="ShuffleNetV1: An Extremely Efficient Convolutional Neural Network for Mobile"></a>ShuffleNetV1: An Extremely Efficient Convolutional Neural Network for Mobile</h3><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>本文提出了一个计算效率高的网络结构——ShuffleNet</p><p>面向对象：计算能力有限（10-150 MFLOPs）的移动端设备</p><p>提出方法：pointwise group convolution 、 channel shuffle</p><p>效果：在维持计算准确度的同时减少了计算花销</p><p>​            ImageNet分类任务（under 40 MFLOPs）,比MobileNet错误率低7.8%</p><p>​            在基于ARM的移动端设备上，同等准确度下，比AlexNet快13倍（理论加速是18倍）</p><hr><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>构造更深和更大的CNN是许多视觉任务的趋势，一般精确的CNN网络含有数百层和数千个通道，需要数十亿量级FLOPs，本文追求的是在有限的计算资源下追求最好的性能。</p><p>现有方法：剪枝、压缩、low-bit表示基础网络。</p><p>本文是探索一个在给定计算资源情况下的高效网络基础架构。</p><p>由于密集1×1卷积代价昂贵，当前的先进的基础架构在小网络的情况下比较低效，我们提出了pointwise group convolution （降低计算复杂度），提出channel shuffle促进信息在特征通道里的流动，以抵消群卷积的副作用，与其他流行网络相比，在给定计算预算下，我们网络允许更多feature map通道，可以编码更多信息，对小网络的性能比较重要。</p><hr><h4 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h4><p>在了解相关工作前，我们先回顾一下标准卷积。</p><p> 标准卷积</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v2399614b034d4b25382b0f5e4c80107f71440w.jpg" alt="标准卷积计算图"></p><p>HxW表示输入特征图空间尺寸（如上图所示，H和W代表特征图的宽度和高度，输入和输出特征图尺寸不变），N是输入特征通道数，KxK表示卷积核尺寸，M表示输出卷积通道数，则标准卷积计算量是HWNK²M，参数量为K²NM。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v24acb7417537e845657901de022a9167a1440w.jpg" alt="标准卷积计算过程"></p><p>如下图所示标准卷积在空间维度和通道维度直观说明（以下示意图省略“spatial“，”channel“，”Input“，”Output“），输入特征图和输出特征图之间连接线表示输入和输出之间的依赖关系。以conv3x3为例子，输入和输出空间“spatial”维度密集连接表示局部连接；而通道维度是全连接，卷积运算都是每个通道卷积操作之后的求和(上图)，和每个通道特征都有关，所以“channel”是互相连接的关系。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v22d777b5051846271ffce36228fdcc5751440w.jpg" alt="标准卷积：空间维度和通道维度示意图"></p><h5 id="Efficient-Model-Designs"><a href="#Efficient-Model-Designs" class="headerlink" title="Efficient Model Designs"></a>Efficient Model Designs</h5><h6 id="GoogLeNet-更低的复杂度增加了网络的深度"><a href="#GoogLeNet-更低的复杂度增加了网络的深度" class="headerlink" title="GoogLeNet(更低的复杂度增加了网络的深度)"></a>GoogLeNet(更低的复杂度增加了网络的深度)</h6><p>GoogLeNet是14年ImageNet挑战赛的冠军，当年的亚军是另外一个很有名的网络–vgg，它有着22层的深度，有着更好的性能的同时，确有着更低的参数量（AlexNet的1/3，vgg的1/12）。</p><p>主要亮点是它的inception结构：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/e54387f99054ef49.png" alt="inception模块"></p><p>GoogLeNet的构建主要是基于inception模块的堆叠，这里我们只关注它轻量高效的特性，主要是通过inception结构中这两个特点来体现的。</p><ul><li><p>多尺寸卷积再聚合</p><p>可以看到前层到后层的计算有四个分支，各分支做不同尺寸的卷积或者池化，再将结果堆叠作为下一层，作者对这种结构的解释（2、3没那么好理解，都比较抽象，有需要推荐阅读论文原文，或者参考我下面给出的博客链接）：</p><ol><li>多个尺度上进行卷积，能提取不同尺度的特征。特征丰富有助于网络推理。</li><li>利用稀疏矩阵分解成密集矩阵计算的原理来加快收敛速度。</li><li>Hebbin赫布原理。</li></ol></li><li><p>1×1卷积（pointwise convolution）</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v26183445ebd302f4358e3f27333edadec1440w.jpg" alt="1×1卷积示意图"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v246e4dfaf83219c95d0ddec73a18ad38e1440w.jpg" alt="Pointwise卷积：空间维度和通道维度示意图"></p><p>注意3×3和5×5卷积分支都先使用了1×1卷积，对于这一点的解释：</p><ol><li><p>使用1x1卷积进行降维，降低了计算复杂度和参数量</p><p>根据我们之前的推导，容易知道假设上一层的通道数为$n_1$,下一层通道数为$n_2$，不考虑特征图的尺度和卷积核大小，那么计算复杂度是$n_1n_2$,如果先利用1x1卷积将通道数降为m，那么计算复杂度$n_1m+n_2m=(n_1+n_2)m$,那么只要m足够小，就能降低计算复杂度。</p></li><li><p>修正线性激活（ReLU）</p><p>注意上图中省略了ReLU操作，事实上每次卷积之后都会紧跟一个ReLU层，那么显而易见，这里相当于做了两次完整卷积，自然可以组合更多非线性特征。</p></li></ol></li></ul><p>此处讲解比较粗略，有需要推荐阅读论文，或者参考下列链接：</p><p> <a href="https://my.oschina.net/u/876354/blog/1637819" target="_blank" rel="noopener">大话CNN经典模型:GoogLeNet(从Inception v1到v4的演进)</a></p><p><a href="https://www.jianshu.com/p/bfc6da961059" target="_blank" rel="noopener">深入理解GoogLeNet结构（原创）</a></p><p>[][]</p><hr><h6 id="SqueezeNet在保持精度的同时，显著降低了参数和计算量。"><a href="#SqueezeNet在保持精度的同时，显著降低了参数和计算量。" class="headerlink" title="SqueezeNet在保持精度的同时，显著降低了参数和计算量。"></a>SqueezeNet在保持精度的同时，显著降低了参数和计算量。</h6><p>文章标题称同等精度下，参数量仅为AlexNet的1/50，极度下可以压缩到0.5M,AlexNet的1/500（实质被较为广泛地吐槽为标题党，首先所谓参数量为1/50，主要是抛弃了全连接层，所以除却这一部分，参数量其实也大概是原来的1/3，至于压缩到0.5M，是使用了独立于这篇paper外的压缩技术，所以这个网络并不能压缩模型）。</p><p>做法（并没有太多创新点，主要是综合了结构优化和模型压缩）：</p><ul><li><p>大量使用1x1卷积核替换3x3卷积核，因为参数可以降低9倍，这是显而易见的。</p></li><li><p>类似于inception的模块化设计–FireModule</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/1121500.jpg" alt="FireModule结构图"></p><p>本质上和上面的inception差不多</p></li><li><p>网络整体上使用ResNet的跳跃连接，inceptionV4也有对应研究。</p></li><li><p>模型压缩方法：SVD、网络剪枝、量化等(没有仔细了解，后续…)</p></li><li><p>另外文章指出了网络整体的下采样层后置有利于提升网络的性能，也就是说前面层的特征图尺寸较大，这一点其实与降低计算量相悖。</p></li></ul><hr><h6 id="ResNet利用高效的瓶颈结构实现了令人印象深刻的性能"><a href="#ResNet利用高效的瓶颈结构实现了令人印象深刻的性能" class="headerlink" title="ResNet利用高效的瓶颈结构实现了令人印象深刻的性能"></a>ResNet利用高效的瓶颈结构实现了令人印象深刻的性能</h6><p>凯明大神的代表作，以跳跃连接解决深层网络难以训练问题</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/876354.png" alt="残差网络结构"></p><p>其实深层网络难以训练主要是因为梯度消失问题（由于链式法则，梯度从后层向前传递是以0.25衰减的，所以很深的网络到前层几乎梯度为0了，网络几乎得不到训练），这里引入的shortcut connections直接将后层的梯度传递到前层。（和这里提到的无关，但是忍不住想说一下）</p><ul><li><p>bottleneck structure</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20181005185517765.png" alt="ResNet的残差网络结构"></p></li></ul><p>上图两个都是ResNet的残差网络结构，右图就是bottleneck structure结构，与左侧相比，同样是引入了两个1x1卷积层，一个用于压缩通道，一个用于恢复通道，想象一下是不是和瓶颈结构类似，这一结构并未降低计算复杂度，但是参数是之前的1/17。（可以自己推理一下）</p><p>对这一部分有兴趣可以移步阅读原论文，或者参考：</p><p><a href="https://my.oschina.net/u/876354/blog/1622896" target="_blank" rel="noopener">大话深度残差网络（DRN）ResNet网络原理</a></p><hr><h6 id="SENet引入了一种架构单元"><a href="#SENet引入了一种架构单元" class="headerlink" title="SENet引入了一种架构单元"></a>SENet引入了一种架构单元</h6><p>2017ImageNet挑战赛冠军</p><p>ideal：考虑特征通道之间的联系提升网络性能</p><ul><li>核心思想：SE模块（ Squeeze-and-Excitation Module）</li></ul><p>特征重标定:通过学习的方式来自动获取到每个特征通道的重要程度，然后依照这个重要程度去提升有用的特征并抑制对当前任务用处不大的特征。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/247d198e8ef64a7fa040887b6f0ee0e0th.jpg" alt="SE模块示意图"></p><p>上图是我们提出的 SE 模块的示意图。给定一个输入 x，其特征通道数为 $c_1$，通过一系列卷积等一般变换后得到一个特征通道数为$ c_2$ 的特征。与传统的 CNN 不一样的是，接下来我们通过三个操作来重标定前面得到的特征。</p><p>首先是 Squeeze 操作，我们顺着空间维度来进行特征压缩，将每个二维的特征通道变成一个实数，这个实数某种程度上具有全局的感受野，并且输出的维度和输入的特征通道数相匹配。它表征着在特征通道上响应的全局分布，而且使得靠近输入的层也可以获得全局的感受野，这一点在很多任务中都是非常有用的。</p><p>其次是 Excitation 操作，它是一个类似于循环神经网络中门的机制。通过参数 w 来为每个特征通道生成权重，其中参数 w 被学习用来显式地建模特征通道间的相关性。</p><p>最后是一个 Reweight 的操作，我们将 Excitation 的输出的权重看做是进过特征选择后的每个特征通道的重要性，然后通过乘法逐通道加权到先前的特征上，完成在通道维度上的对原始特征的重标定。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/915f03dfc77a4f4f98aa3a8b1b6372e3th.jpg" alt="SE模块嵌入实例"></p><p>上左图是将 SE 模块嵌入到 Inception 结构的一个示例。方框旁边的维度信息代表该层的输出。</p><p>这里我们使用 global average pooling 作为 Squeeze 操作。紧接着两个 Fully Connected 层组成一个 Bottleneck 结构去建模通道间的相关性，并输出和输入特征同样数目的权重。我们首先将特征维度降低到输入的 1/16，然后经过 ReLu 激活后再通过一个 Fully Connected 层升回到原来的维度。这样做比直接用一个 Fully Connected 层的好处在于：1）具有更多的非线性，可以更好地拟合通道间复杂的相关性；2）极大地减少了参数量和计算量。然后通过一个 Sigmoid 的门获得 0~1 之间归一化的权重，最后通过一个 Scale 的操作来将归一化后的权重加权到每个通道的特征上。</p><p>除此之外，SE 模块还可以嵌入到含有 skip-connections 的模块中。上右图是将 SE 嵌入到 ResNet 模块中的一个例子，操作过程基本和 SE-Inception 一样，只不过是在 Addition 前对分支上 Residual 的特征进行了特征重标定。如果对 Addition 后主支上的特征进行重标定，由于在主干上存在 0~1 的 scale 操作，在网络较深 BP 优化时就会在靠近输入层容易出现梯度消散的情况，导致模型难以优化。</p><p>SE模块支持嵌入众多的主流网络，在提升性能的同时，几乎不增加计算量和参数量。</p><p>更多细节建议阅读原论文，或者参考原作者的讲解报告：</p><p><a href="https://www.cnblogs.com/bonelee/p/9030092.html" target="_blank" rel="noopener">Momenta详解ImageNet 2017夺冠架构SENet</a></p><hr><h6 id="移动NASNet模型的性能与我们的同类ShuffleNet模型相当"><a href="#移动NASNet模型的性能与我们的同类ShuffleNet模型相当" class="headerlink" title="移动NASNet模型的性能与我们的同类ShuffleNet模型相当"></a>移动NASNet模型的性能与我们的同类ShuffleNet模型相当</h6><p>首先要搞懂NAS，NASNet是将其推广到imageNet数据集。还没来得及仔细看，对于具体方法的介绍暂且放置。</p><hr><h5 id="Group-Convolution"><a href="#Group-Convolution" class="headerlink" title="Group Convolution"></a>Group Convolution</h5><p>分组卷积最早出现在AlexNet中，即将模型分布在两个GPU上。如下图：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v25c41e6327eeb662dc1c6f8c20c8badcbr.jpg" alt="AlexNet网络架构"></p><p>分组卷积是标准卷积的变体，其中输入特征通道被为G组(下图)，并且对于每个分组的信道独立地执行卷积，则分组卷积计算量是HWNK²M/G，为标准卷积计算量的1/G。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v2-baf2aeff4dc500d4a6d257513c0b2b95_r.jpg" alt="空间维度和通道维度示意图"></p><h6 id="Depthwise-convolution"><a href="#Depthwise-convolution" class="headerlink" title="Depthwise convolution"></a>Depthwise convolution</h6><p>当G=C，（即将每一个通道分为一组），这时就称作Depthwise convolution，此时为Group Convolution的最简化形式，相当于单独收集每个通道的信息，此时计算量也是最低的，为HWNK²M/C。</p><p>但是Group Convolution应该是不改变参数量的。因为卷积核的厚度变为1/G，个数也变为原来的G倍。</p><p>MobileNet采用了深度可分离卷积，并在轻量级模型中获得了最先进的结果。</p><p>本文以我们的工作以一种新的形式推广了分组卷积和深度可分离卷积。</p><hr><h5 id="Channel-Shuffle-Operation"><a href="#Channel-Shuffle-Operation" class="headerlink" title="Channel Shuffle Operation"></a>Channel Shuffle Operation</h5><p>之前很少有工作研究这一方面或者他的有效性。所以这个方法可以算作是这篇论文提出的。</p><p>Grouped Convlution导致模型的信息流限制在各个group内，组与组之间没有信息交换，这会影响模型的表示能力。因此，需要引入group之间信息交换的机制，即Channel Shuffle操作（通过张量的reshape 和transpose，实现改变通道之间顺序）。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v23868e1964596de344311df55965067261440w.jpg" alt="Channel shuffle：空间维度和通道维度示意图"></p><hr><h5 id="Model-Acceleration（尚未仔细研究）"><a href="#Model-Acceleration（尚未仔细研究）" class="headerlink" title="Model Acceleration（尚未仔细研究）"></a>Model Acceleration（尚未仔细研究）</h5><h6 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h6><p>保持预训练模型精度的同时，加速推理。</p><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><ul><li><p>修剪网络连接或通道。</p></li><li><p>减少预训练模型中的冗余连接。</p></li><li><p>提出量化和因式分解来减少计算中的冗余，加快推理速度。</p></li><li><p>在不修改参数的情况下，由FFT等方法实现的优化卷积算法在实际应用中降低了时间消耗。</p></li><li><p>蒸馏将知识从大型模型转移到小型模型，这使得训练小型模型更加容易。</p></li></ul><hr><h5 id="MobileNet-V1"><a href="#MobileNet-V1" class="headerlink" title="MobileNet V1"></a>MobileNet V1</h5><p>思想：深度可分离卷积（Depthwise separable convolution）代替标准的卷积，并使用宽度因子(width multiply)减少参数量。</p><p>深度可分离卷积把标准的卷积因式分解成一个深度卷积(depthwise convolution)和一个逐点卷积(pointwise convolution)。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/v23450e77fa31b290006e0ea4b77a16d081440w.jpg" alt="深度可分离卷积示意图"></p><p>计算量的减少：</p><p>给定输入大小$c×h×w$，输出为$c×h×m$，卷积核大小为$k×k$</p><p>标准卷积：$chwmk^2$</p><p>深度可分离卷积：$chwk^2+chwm$</p><p>压缩率：$(chwk^2+chwm)/chwmk^2=1/m+1/k^2$</p><hr><h4 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h4><h5 id="Channel-Shuffle-for-Group-Convolutions"><a href="#Channel-Shuffle-for-Group-Convolutions" class="headerlink" title="Channel Shuffle for Group Convolutions"></a>Channel Shuffle for Group Convolutions</h5><p>现代卷积神经网络通常由相同结构的重复构建块组成。构建块时引入了高效的深度可分卷积或组卷积，但是没有对1×1卷积使用这些高效卷积方式，但其实由于1×1卷积的大量使用，它的计算量在整个网络中的占比是相当大的，所以本文考虑对1×1卷积也使用类似分组卷积这种高效形式。</p><p>计算成本确实减少了，但是也会出现我们上面所说的各组之间阻碍信息流，削弱了表征能力。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/sjjuyu78885.png" alt="对传统分组卷积的通道重排修正"></p><p>图a是传统的分组卷积，通过像图c那样加入一个通道重排模块（reshape），就可以解决这个问题。并且通道重排也是可微的，那么不影响网络的端对端训练。</p><h5 id="ShuffleNet-Unit"><a href="#ShuffleNet-Unit" class="headerlink" title="ShuffleNet Unit"></a>ShuffleNet Unit</h5><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/52426.png" alt="ShuffleNet单元的形成"></p><p>它的设计原理是基于residual block的，当然这里的残差块和我们在上面讲到的原始残差块略有区别，加入了BN（批量标准化）以及对3×3卷积块使用了Depthwise convolution，这些都是后续研究做出的改进。然后我们将第一个1×1层替换为分组逐点卷积，然后进行通道重排操作，并将3×3卷积块后面的Relu操作去掉（操作很工程，并没有做过多的解释。。），形成一个ShuffleNet单元，如(b)所示。当然文章最终给出的ShuffleNet单元如(c)所示，注意stride=2,那么之前的shortcut conection恒等连接替换成平均池化，求和替换成连接。</p><p>计算量的减少：</p><p>给定输入大小$c×h×w$，瓶颈通道数是m</p><p>ResNet:$hw(2cm+9m^2)$FLOPs</p><p>ResNext:$hw(2cm+9m^2/g)$</p><p>ShuffleNet单元（b）:$hw(2cm/g+9m)$</p><p>给定计算预算，ShuffleNet可以使用更广的特征图。我们发现这对于小型网络非常重要，因为小型网络通常没有足够的通道来处理信息。</p><p>故意只在瓶颈上使用深度卷积，以尽可能地避免开销。</p><h5 id="Network-Architecture"><a href="#Network-Architecture" class="headerlink" title="Network Architecture"></a>Network Architecture</h5><h6 id="参数g的选取"><a href="#参数g的选取" class="headerlink" title="参数g的选取"></a>参数g的选取</h6><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/7878163421.png" alt="ShuffleNet架构计算复杂度与g与输出通道数的关系"></p><p>上面是ShuffleNet的架构，我们知道在我们上面的设计中g是可调节的超参数，当然g的增大意味着整体计算复杂度的下降，那么这里相应增加输出的通道数，使得网络整体计算成本大概保持在（140MFLOPs），这一架构我们称之为ShuffleNet 1×。</p><h6 id="复杂度的定制"><a href="#复杂度的定制" class="headerlink" title="复杂度的定制"></a>复杂度的定制</h6><p>通过对输出通道调控可以使这个网络满足其他所需要的复杂度，简单地将通道的数量乘以一个比例因子s，将这一网络称为ShuffleNet s×，复杂度是ShuffleNet 1×的<em>s</em>2倍。</p><hr><h4 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h4><p>首先进行消融实验分别对分组逐点卷积和通道重排操作进行评估。</p><h5 id="分组逐点卷积评估"><a href="#分组逐点卷积评估" class="headerlink" title="分组逐点卷积评估"></a>分组逐点卷积评估</h5><h5 id><a href="#" class="headerlink" title></a><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134456547.png" alt="分类误差VS组数g"></h5><p>g=1代表不做分组逐点卷积。</p><h5 id="通道重排-vs-不重排"><a href="#通道重排-vs-不重排" class="headerlink" title="通道重排 vs 不重排"></a>通道重排 vs 不重排</h5><h5 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134517316.png" alt="通道重排 vs 不重排"></h5><h5 id="与其他结构单元比较"><a href="#与其他结构单元比较" class="headerlink" title="与其他结构单元比较"></a>与其他结构单元比较</h5><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/2019082313454348.png" alt="同一复杂度性能比较"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134605985.png" alt="同一性能复杂度比较"></p><h5 id="MobileNets和其他框架进行比较"><a href="#MobileNets和其他框架进行比较" class="headerlink" title="MobileNets和其他框架进行比较"></a>MobileNets和其他框架进行比较</h5><h5 id="-2"><a href="#-2" class="headerlink" title></a><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134627490.png" alt="ShuffleNet vs. MobileNet （在ImageNet分类任务上）"></h5><h5 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a>泛化能力</h5><p>coco目标检测任务，以采用Faster-RCNN作为检测框架，测试ShuffleNet（以MobileNets进行对比）。</p><h5 id="-3"><a href="#-3" class="headerlink" title></a><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134647752.png" alt="coco探测数据集结果"></h5><h5 id="实际加速评估"><a href="#实际加速评估" class="headerlink" title="实际加速评估"></a>实际加速评估</h5><p>评估了基于ARM平台的移动设备上的ShuffleNet模型的实际推理速度。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20190823134717385.png" alt="移动设备上的实际推理时间"></p><p>后续：补上MobileNets V2和ShuffleNet V2的改进方法</p>]]></content>
      
      
      <categories>
          
          <category> Deeplearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轻量级网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单指令集MIPS微处理器设计仿真实验报告</title>
      <link href="/2020/04/23/jian-dan-zhi-ling-ji-mips-wei-chu-li-qi-she-ji-fang-zhen-shi-yan-bao-gao/"/>
      <url>/2020/04/23/jian-dan-zhi-ling-ji-mips-wei-chu-li-qi-she-ji-fang-zhen-shi-yan-bao-gao/</url>
      
        <content type="html"><![CDATA[<h3 id="简单指令集MIPS微处理器设计仿真实验报告"><a href="#简单指令集MIPS微处理器设计仿真实验报告" class="headerlink" title="简单指令集MIPS微处理器设计仿真实验报告"></a>简单指令集MIPS微处理器设计仿真实验报告</h3><hr><h4 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h4><p>​        全部采用Verilog 硬件描述语言设计实现简单指令集MIPS 微处理器，并且要求微处理器支持：</p><ul><li>算术、逻辑运算指令：add、sub、and、or、slt</li><li>数据传送指令：lw、sw</li><li>程序控制指令:beq、j</li></ul><p>​        要求指令存储器在时钟上升沿读出指令，指令指针的修改、寄存器文件写入、数据存储器数据写入都在时钟下降沿完成。完成完整设计代码输入、各模块完整功能仿真，整体仿真，验证所有指令执行情况。</p><p>​        且假定所有通用寄存器复位时取值都为各自寄存器编号乘以4；PC寄存器初始值为0；数据存储器和指令存储器容量大小为32*32，且地址都从0开始，指令存储器初始化时装载测试MIPS汇编程序的机器指令，数据存储器所有存储单元的初始值为其对应地址的取值。需要注意的是数据存储器的地址呈现以下规则：都是4的整数倍。</p><p>​        仿真以下MIPS汇编语言程序段的执行流程：</p><pre class=" language-verilog"><code class="language-verilog">main<span class="token punctuation">:</span>    add <span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$3</span>        lw <span class="token property">$4</span><span class="token punctuation">,</span><span class="token function">4</span><span class="token punctuation">(</span><span class="token property">$2</span><span class="token punctuation">)</span>        sw <span class="token property">$5</span><span class="token punctuation">,</span><span class="token function">8</span><span class="token punctuation">(</span><span class="token property">$2</span><span class="token punctuation">)</span>        sub <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        <span class="token keyword">or</span> <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        <span class="token keyword">and</span> <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        slt <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        beq <span class="token property">$3</span><span class="token punctuation">,</span><span class="token property">$3</span><span class="token punctuation">,</span>equ        w <span class="token property">$2</span><span class="token punctuation">,</span><span class="token function">0</span><span class="token punctuation">(</span><span class="token property">$3</span><span class="token punctuation">)</span>equ<span class="token punctuation">:</span>    beq <span class="token property">$3</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span>exit        sw <span class="token property">$2</span><span class="token punctuation">,</span><span class="token function">0</span><span class="token punctuation">(</span><span class="token property">$3</span><span class="token punctuation">)</span>exit<span class="token punctuation">:</span>   j main</code></pre><hr><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><ul><li>熟悉微处理器的基本构成</li><li>掌握哈佛结构的计算机工作原理</li><li>学会设计简单指令集的mips微处理器</li><li>了解软件控制硬件工作的基本原理</li></ul><hr><h4 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h4><ul><li>Windows10操作系统</li><li>编辑工具：Notepad++,ModelSim编辑器</li><li>Verilog仿真平台:ModelSim</li></ul><hr><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>​        本实验设计的简单指令集的MIPS微处理器完整框图如下所示。由图可知，该微处理器由寄存器文件模块、ALU模块、指令存储器模块、数据存储器模块、主控制器译码模块、ALU控制模块，并将各模块按照下图级联方式进行连接，再加上时钟信号CLK和复位信号Reset，就能模拟MIPS微处理器在上电情况在时钟节拍的调剂下执行指令。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200420155555.png" alt="图1 加上控制器的简单指令集MIPS微处理器完整框图"></p><hr><h4 id="实验模块设计"><a href="#实验模块设计" class="headerlink" title="实验模块设计"></a>实验模块设计</h4><h5 id="寄存器文件模块的设计"><a href="#寄存器文件模块的设计" class="headerlink" title="寄存器文件模块的设计"></a>寄存器文件模块的设计</h5><p>寄存器文件模块保存寄存器操作数数据，这里使用32个32位宽的寄存器存储数据（1个寄存器存储1个寄存器操作数），指令执行过程中需要区分指令Rs,Rt,Rd域（提供寄存器地址）对应的寄存器，该模块支持读出Rs,Rt域对应的寄存器的值，在时钟信号clk的上升沿，并且能够在写信号regwr有效、复位信号reset无效情况下，将数据写入Rd域对应的寄存器，并且在复位信号reset有效时，将所有寄存器置0。</p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">regFile</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RsAddr<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RtAddr<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> WriteAddr<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> WriteData<span class="token punctuation">,</span>    <span class="token keyword">input</span> regwr<span class="token punctuation">,</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> reset<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RsData<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RtData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> regs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> RsData<span class="token operator">=</span><span class="token punctuation">(</span>RsAddr<span class="token operator">==</span><span class="token number">5'b0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">32'b0</span><span class="token punctuation">:</span>regs<span class="token punctuation">[</span>RsAddr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> RtData<span class="token operator">=</span><span class="token punctuation">(</span>RtAddr<span class="token operator">==</span><span class="token number">5'b0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">32'b0</span><span class="token punctuation">:</span>regs<span class="token punctuation">[</span>RtAddr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reset <span class="token operator">&amp;</span> regwr<span class="token punctuation">)</span></code></pre><h5 id="ALU模块的设计"><a href="#ALU模块的设计" class="headerlink" title="ALU模块的设计"></a>ALU模块的设计</h5><p>在mips简单指令集下，ALU单元需支持对输入的两个有符号操作数in1、in2做加、减、与、或、小于设置5种运算，输出运算结果ALURes，并且有输入的ALU控制信号ALUCtr决定执行何种操作，其对应关系如下图所示：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200420172425.png" alt="图2 对应加、减、与、或、小于设置5种运算的ALU 控制信号编码"></p><p>输出ALU运算结果ALURes以及判断两操作数是否相等的标志Zero（若两操作数相等）用于程序跳转指令通路的控制。</p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ALU</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token keyword">signed</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token keyword">signed</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> in2<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALUCtr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALURes<span class="token punctuation">,</span>    <span class="token keyword">output</span>  <span class="token keyword">reg</span> Zero    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span>in1 <span class="token keyword">or</span> in2 <span class="token keyword">or</span> ALUCtr<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>ALUCtr<span class="token punctuation">)</span>            <span class="token number">4'b0000</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span>in1 <span class="token operator">&amp;</span> in2<span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0001</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span>in1 <span class="token operator">|</span> in2<span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0010</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span>in1 <span class="token operator">+</span> in2<span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0110</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span>in1 <span class="token operator">-</span> in2<span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token punctuation">(</span>ALURes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">4'b0111</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span><span class="token punctuation">(</span>in1 <span class="token operator">&lt;</span> in2<span class="token punctuation">)</span> <span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                ALURes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                Zero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><h5 id="指令存储器模块的设计"><a href="#指令存储器模块的设计" class="headerlink" title="指令存储器模块的设计"></a>指令存储器模块的设计</h5><p>指令存储器存储待执行的指令，这里用32个32位宽的寄存器保存指令（1个寄存器存储1条指令），通过传入指令的序号地址addr（顶层模块中PC寄存器右移两位的结果得到的序号地址），得到待执行指令的机器码instr。这里提前使用MARS得到测试汇编代码的机器码，使用readmemh函数将机器码从文件中读取到寄存器内。</p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">instruct_rom</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> addr<span class="token punctuation">,</span><span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> instr<span class="token punctuation">,</span><span class="token keyword">input</span> clk    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  regs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>        <span class="token keyword">assign</span> instr <span class="token operator">=</span> regs <span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token property">$readmemh</span><span class="token punctuation">(</span><span class="token string">"D:/inter/mips_cpu/test.txt"</span><span class="token punctuation">,</span>regs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span></code></pre><h5 id="数据存储器模块的设计"><a href="#数据存储器模块的设计" class="headerlink" title="数据存储器模块的设计"></a>数据存储器模块的设计</h5><p>数据存储器存储存储器操作数，这里用32个32位宽的寄存器保存数据（1个寄存器存储1个存储器操作数），通过输入地址addr，输出对应存储单元的数据readdata，并且在clk时钟上升沿，并且在写控制信号MemWR有效地情况下，可以将数据writedata写入地址addr对应存储单元。初始时，按照测试要求，数据存储器存储初始值对应的地址。</p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">data_rom</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> addr<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> readdata<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> writedata<span class="token punctuation">,</span>    <span class="token keyword">input</span> MemWR<span class="token punctuation">,</span>    <span class="token keyword">input</span> clk    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>  regs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> readdata<span class="token operator">=</span>regs<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> clk<span class="token punctuation">)</span>    <span class="token function">if</span><span class="token punctuation">(</span>MemWR<span class="token punctuation">)</span>    regs<span class="token punctuation">[</span>addr<span class="token punctuation">]</span><span class="token operator">=</span>writedata<span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token keyword">initial</span>    <span class="token function">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        regs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">endmodule</span></code></pre><h5 id="主控制器译码模块的设计"><a href="#主控制器译码模块的设计" class="headerlink" title="主控制器译码模块的设计"></a>主控制器译码模块的设计</h5><p>主控制模块输入指令操作码opCode，产生ALU控制信号ALUop，电路中5个复用器的通道选择信号RtDst、Imm、M2R 、B、J，以及寄存器文件、数据存储器写控制信号regwr、memwr。具体译码规则如下图：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20211939.png" alt="图3 主控制器译码规则"></p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">master_Ctr</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> opCode<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>ALUop<span class="token punctuation">,</span>    <span class="token keyword">output</span> RtDst<span class="token punctuation">,</span>    <span class="token keyword">output</span> regwr<span class="token punctuation">,</span>    <span class="token keyword">output</span> Imm<span class="token punctuation">,</span>    <span class="token keyword">output</span> memwr<span class="token punctuation">,</span>    <span class="token keyword">output</span> B<span class="token punctuation">,</span>    <span class="token keyword">output</span> J<span class="token punctuation">,</span>    <span class="token keyword">output</span> M2R    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> temp_output<span class="token punctuation">;</span>    <span class="token keyword">assign</span> <span class="token operator">{</span>RtDst<span class="token punctuation">,</span>Imm<span class="token punctuation">,</span>M2R<span class="token punctuation">,</span>regwr<span class="token punctuation">,</span>memwr<span class="token punctuation">,</span>B<span class="token punctuation">,</span>J<span class="token punctuation">,</span>ALUop<span class="token operator">}=</span>temp_output<span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span>opCode<span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>opCode<span class="token punctuation">)</span>            <span class="token number">6'b000010</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'bxxx0001xx</span><span class="token punctuation">;</span>            <span class="token number">6'b000000</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'b100100010</span><span class="token punctuation">;</span>            <span class="token number">6'b100011</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'b011100000</span><span class="token punctuation">;</span>            <span class="token number">6'b101011</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'bx1x010000</span><span class="token punctuation">;</span>            <span class="token number">6'b000100</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'bx0x001001</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>temp_output<span class="token operator">=</span><span class="token number">9'b000000000</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span><span class="token keyword">endmodule</span></code></pre><h5 id="ALU控制模块的设计"><a href="#ALU控制模块的设计" class="headerlink" title="ALU控制模块的设计"></a>ALU控制模块的设计</h5><p>ALU控制模块输入主控制器产生的ALUop信号和指令功能码func，输出ALU控制信号ALUCtr。具体译码规则如下图：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20213520.png" alt="20213520"></p><p>模块verilog代码设计如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ALU_Ctr</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALUop<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> func<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALUCtr    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span>ALUop <span class="token keyword">or</span> func<span class="token punctuation">)</span>    <span class="token function">casex</span><span class="token punctuation">(</span><span class="token operator">{</span>ALUop<span class="token punctuation">,</span>func<span class="token operator">}</span><span class="token punctuation">)</span>        <span class="token number">8'b00xxxxxx</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0010</span><span class="token punctuation">;</span>        <span class="token number">8'b01xxxxxx</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0110</span><span class="token punctuation">;</span>        <span class="token number">8'b10xx0000</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0010</span><span class="token punctuation">;</span>        <span class="token number">8'b10xx0010</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0110</span><span class="token punctuation">;</span>        <span class="token number">8'b10xx0100</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0000</span><span class="token punctuation">;</span>        <span class="token number">8'b10xx0101</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0001</span><span class="token punctuation">;</span>        <span class="token number">8'b10xx1010</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0111</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> ALUCtr<span class="token operator">=</span><span class="token number">4'b0000</span><span class="token punctuation">;</span>    <span class="token keyword">endcase</span><span class="token keyword">endmodule</span></code></pre><h5 id="Mips微处理器顶层模块设计"><a href="#Mips微处理器顶层模块设计" class="headerlink" title="Mips微处理器顶层模块设计"></a>Mips微处理器顶层模块设计</h5><p>顶层模块将之前的多个模块实例化，并且按照图5中将各个模块通过复用器、移位、符号拓展、拼接单元连接起来。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20214745.png" alt="20214745"></p><p>模块verilog代码设计如下（中间信号见图5）：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">main_mips_cpu</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> Clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> Reset    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span>         TempPC<span class="token punctuation">,</span>MuxPC<span class="token punctuation">,</span>JumpPC<span class="token punctuation">,</span>BranchPC<span class="token punctuation">,</span>SquencePC<span class="token punctuation">,</span>Imm32<span class="token punctuation">,</span>ImmL2<span class="token punctuation">,</span>RegWD<span class="token punctuation">,</span>RsData<span class="token punctuation">,</span>RtData<span class="token punctuation">,</span>ALUIn2<span class="token punctuation">,</span>ALURes<span class="token punctuation">,</span>MemRD<span class="token punctuation">,</span>Instr<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> RegWA<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> PsudeoPC<span class="token punctuation">;</span>    <span class="token keyword">wire</span> BranchZ<span class="token punctuation">,</span>J<span class="token punctuation">,</span>B<span class="token punctuation">,</span>Zero<span class="token punctuation">,</span>RegDst<span class="token punctuation">,</span>RegWr<span class="token punctuation">,</span>ALUSrc<span class="token punctuation">,</span>MemWR<span class="token punctuation">,</span>Mem2Reg<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALUOp<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ALUCtr<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> PC<span class="token punctuation">;</span>    <span class="token keyword">assign</span> PsudeoPC<span class="token operator">={</span>Instr<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2'b00</span><span class="token operator">}</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> JumpPC<span class="token operator">={</span>SquencePC<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>PsudeoPC<span class="token operator">}</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> SquencePC<span class="token operator">=</span>PC<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> BranchPC<span class="token operator">=</span>ImmL2<span class="token operator">+</span>SquencePC<span class="token punctuation">;</span>    <span class="token keyword">assign</span> MuxPC<span class="token operator">=</span>BranchZ<span class="token operator">?</span>BranchPC<span class="token punctuation">:</span>SquencePC<span class="token punctuation">;</span>    <span class="token keyword">assign</span> TempPC<span class="token operator">=</span>J<span class="token operator">?</span>JumpPC<span class="token punctuation">:</span>MuxPC<span class="token punctuation">;</span>    <span class="token keyword">assign</span> BranchZ<span class="token operator">=</span>Zero<span class="token operator">&amp;</span>B<span class="token punctuation">;</span>    <span class="token keyword">assign</span> ImmL2<span class="token operator">={</span>Imm32<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2'b00</span><span class="token operator">}</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> Imm32<span class="token operator">={</span>Instr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token number">16'hffff</span><span class="token punctuation">:</span><span class="token number">16'h0</span><span class="token punctuation">,</span>Instr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> ALUIn2<span class="token operator">=</span>ALUSrc<span class="token operator">?</span>Imm32<span class="token punctuation">:</span>RtData<span class="token punctuation">;</span>    <span class="token keyword">assign</span> RegWA<span class="token operator">=</span>RegDst<span class="token operator">?</span>Instr<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>Instr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> RegWD<span class="token operator">=</span>Mem2Reg<span class="token operator">?</span>MemRD<span class="token punctuation">:</span>ALURes<span class="token punctuation">;</span>    data_rom <span class="token function">U_data_rom</span><span class="token punctuation">(</span>ALURes<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>MemRD<span class="token punctuation">,</span>RtData<span class="token punctuation">,</span>MemWR<span class="token punctuation">,</span>Clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    ALU <span class="token function">U_ALU</span><span class="token punctuation">(</span>RsData<span class="token punctuation">,</span>ALUIn2<span class="token punctuation">,</span>ALUCtr<span class="token punctuation">,</span>ALURes<span class="token punctuation">,</span>Zero<span class="token punctuation">)</span><span class="token punctuation">;</span>    instruct_rom <span class="token function">U_instruct_rom</span><span class="token punctuation">(</span>PC<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Instr<span class="token punctuation">,</span>Clk<span class="token punctuation">)</span><span class="token punctuation">;</span>    regFile            <span class="token function">U_regFile</span><span class="token punctuation">(</span>Instr<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Instr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span>RegWA<span class="token punctuation">,</span>RegWD<span class="token punctuation">,</span>RegWr<span class="token punctuation">,</span>Clk<span class="token punctuation">,</span>Reset<span class="token punctuation">,</span>RsData<span class="token punctuation">,</span>RtData<span class="token punctuation">)</span><span class="token punctuation">;</span>    master_Ctr <span class="token function">U_master_Ctr</span><span class="token punctuation">(</span>Instr<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ALUOp<span class="token punctuation">,</span>RegDst<span class="token punctuation">,</span>RegWr<span class="token punctuation">,</span>ALUSrc<span class="token punctuation">,</span>MemWR<span class="token punctuation">,</span>B<span class="token punctuation">,</span>J<span class="token punctuation">,</span>Mem2Reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    ALU_Ctr <span class="token function">U_ALU_Ctr</span><span class="token punctuation">(</span>ALUOp<span class="token punctuation">,</span>Instr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ALUCtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">negedge</span> Clk<span class="token punctuation">)</span>    <span class="token keyword">begin</span>    <span class="token function">if</span><span class="token punctuation">(</span>Reset<span class="token punctuation">)</span>    PC<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    PC<span class="token operator">&lt;=</span>TempPC<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre><hr><h4 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h4><ol><li><p>使用MARS获取测试程序的机器码，并以test.txt保存在D:/inter/mips_cpu路径下。</p></li><li><p>按照上述编写各个子模块，并且对各子模块分级调试仿真。</p></li><li><p>编写testbench对顶层模块实例化，进而对整个微处理器进行仿真，并且对仿真结果进行分析。</p><p>testbench如下：</p><pre class=" language-verilog"><code class="language-verilog"><span class="token constant">`timescale</span> <span class="token number">1</span>ns<span class="token operator">/</span><span class="token number">1</span>ns<span class="token keyword">module</span> <span class="token function">test_main</span><span class="token punctuation">(</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> Clk<span class="token punctuation">,</span>Reset<span class="token punctuation">;</span>    main_mips_cpu <span class="token function">U0</span><span class="token punctuation">(</span>Clk<span class="token punctuation">,</span>Reset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">parameter</span> PERIOD<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token important">always </span><span class="token keyword">begin</span>        Clk<span class="token operator">=</span><span class="token number">1'b0</span><span class="token punctuation">;</span>        #<span class="token punctuation">(</span>PERIOD<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> Clk<span class="token operator">=</span><span class="token number">1'b1</span><span class="token punctuation">;</span>        #<span class="token punctuation">(</span>PERIOD<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">initial</span>    <span class="token keyword">begin</span>    Reset<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token number">#20</span>    Reset<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token number">#2000</span>    <span class="token property">$stop</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span></code></pre></li></ol><hr><h4 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a>实验结果及分析</h4><h5 id="测试的程序"><a href="#测试的程序" class="headerlink" title="测试的程序"></a>测试的程序</h5><pre class=" language-verilog"><code class="language-verilog">main<span class="token punctuation">:</span>    add <span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$3</span>        lw <span class="token property">$4</span><span class="token punctuation">,</span><span class="token function">4</span><span class="token punctuation">(</span><span class="token property">$2</span><span class="token punctuation">)</span>        sw <span class="token property">$5</span><span class="token punctuation">,</span><span class="token function">8</span><span class="token punctuation">(</span><span class="token property">$2</span><span class="token punctuation">)</span>        sub <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        <span class="token keyword">or</span> <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        <span class="token keyword">and</span> <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        slt <span class="token property">$2</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span><span class="token property">$3</span>        beq <span class="token property">$3</span><span class="token punctuation">,</span><span class="token property">$3</span><span class="token punctuation">,</span>equ        w <span class="token property">$2</span><span class="token punctuation">,</span><span class="token function">0</span><span class="token punctuation">(</span><span class="token property">$3</span><span class="token punctuation">)</span>equ<span class="token punctuation">:</span>    beq <span class="token property">$3</span><span class="token punctuation">,</span><span class="token property">$4</span><span class="token punctuation">,</span>exit        sw <span class="token property">$2</span><span class="token punctuation">,</span><span class="token function">0</span><span class="token punctuation">(</span><span class="token property">$3</span><span class="token punctuation">)</span>exit<span class="token punctuation">:</span>   j main</code></pre><h5 id="实验仿真波形图"><a href="#实验仿真波形图" class="headerlink" title="实验仿真波形图"></a>实验仿真波形图</h5><p>实验仿真结果波形图的重要信号如下图（其中存储器和寄存器数据只选择了前5组，因为只有前5个单元的存储器和寄存器数据才有变化）</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/22234421.png" alt="图6 实验仿真波形图"></p><h5 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h5><h6 id="测试信号"><a href="#测试信号" class="headerlink" title="测试信号"></a>测试信号</h6><ul><li>时钟信号Clk是以10ns为周期的正方波</li><li>复位信号Reset在20ns前为1即有效20ns后为0即无效</li></ul><p>符合我们测试信号的预置。</p><h6 id="预置和边沿要求"><a href="#预置和边沿要求" class="headerlink" title="预置和边沿要求"></a>预置和边沿要求</h6><ul><li>寄存器的初始值全为0，存储器的初始值为各自的编号</li><li>指令读取在时钟上升沿完成，PC指针的修改，寄存器文件和数据存储器的写入在时钟下降沿完成。</li></ul><p>符合实验要求</p><h6 id="测试执行的逻辑正确性"><a href="#测试执行的逻辑正确性" class="headerlink" title="测试执行的逻辑正确性"></a>测试执行的逻辑正确性</h6><ol><li><p>PC的跳转情况</p><p>通过指令指针PC的跳转情况，判断整个程序执行的整体跳转情况。我们发现PC的值通过一次递增4在0~32间来回循环，说明程序是在0到8号指令来回循环执行，这符合程序执行的跳转逻辑，我们结合后面的分析判断此处跳转的合理性。</p></li><li><p>第一个循环的执行情况</p><ul><li><p>复位信号失效后的第一个时钟下降沿，先看到PC的值从0跳变到4，并且在下一个时钟上升沿第2条指令的机器码读入，再看这个时钟周期内，RegDst、RegWr为1，其余控制信号为0，表明ALU执行Rs、Rt两寄存器操作数的运算，并将ALU结果写入Rd寄存器，与add指令相符，时钟下降沿时寄存器和存储器值并未发生变化，因为第一条指令是将2号寄存器和3号寄存器的值相加赋予4号寄存器，这里所有寄存器的值都为0，所有没改变4号寄存器的值。</p></li><li><p>时钟的第二个有效下降沿，PC的值从4变为8，并且在下一个时钟上升沿第3条指令的机器码读入，再看这个时钟周期内，ALUSrc、Mem2Reg、RegWr为1，其余控制信号为0，表明ALU执行Rs寄存器操作数和立即数的运算，并将结果作为地址得到对应存储器数据写入Rt寄存器，这与lw指令相符，并且在时钟下降沿4号寄存器变为1，我们看源指令lw $4,4($2)，将存储单元地址为4的存储单元值装载到4号寄存器，按照实验要求中数据存储器的地址规范要求，那么这里存储单元为4的就是1号存储单元，它的值为1,4号寄存器变为1，执行正确。</p></li><li><p>时钟的第三个有效下降沿，PC的值从8变为12，并且此时第4条指令的机器码读入，再看这个时钟周期内，ALUSrc、MemWR为1，RegDst、Mem2Reg为x，其余控制信号为0，表明ALU执行Rs寄存器操作数和立即数的运算，得到存储器地址，并将Rt寄存器的值存入对应存储单元，这与sw指令相符，并且在时钟下降沿2号存储单元的值变为0，执行正确。</p></li><li><p>接下来4个时钟周期，RegDst、RegWr为1，其余控制信号为0，表明ALU执行Rs寄存器操作数和Rt数的运算，并将得到的结果写入Rd寄存器，这是由于这4条指令执行的都是算术逻辑运算类指令，并将值赋予2号寄存器，容易发现2号寄存器值的改变也是正确的。</p></li><li><p>时钟的第8个有效下降沿，PC的值从28变为32，说明第7条指令执行完毕，并且在下一个时钟上升沿第8条指令的机器码读入，这个时间周期内，B为1，RegDst、Mem2Reg为x，其余控制信号为0，PC的跳转由ALU单元的zero信号决定，这与beq指令译码相符，容易知道3号寄存器和4号寄存器的值不相等，那么程序往下执行，所以执行正确。</p></li><li><p>时钟的第9个有效下降沿，PC的值从32变为0，说明第8条指令执行完毕，并且下一时钟上升沿第0条指令的机器码读入，这个时间周期内，BranchZ为1，RegDst、Mem2Reg、ALUSrc为x，其余控制信号为0，这与j指令译码相符，到8号指令调回0号指令，对应波形中PC从32跳回0，所以执行正确。</p><p>综上，这个微处理器的仿真结果是正确的。</p></li></ul></li></ol><hr><h4 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h4><p>这次简单指令集MIPS微处理器设计仿真实验对微处理器的模块结构及功能有了更清晰的认识，对哈佛结构计算机的工作原理也有了更加深刻的理解，达到了巩固课内学习的效果，并且掌握了Verilog仿真平台的使用方法。</p><p>在这次实验中，感谢老师为我们提供了丰富的实验资源，实验过程中目的性非常明确，尽管还是难免遇到了不少问题，通过联系课内知识冷静思考，并且利用老师开设的讨论平台积极与同学们讨论，将这些问题逐一解决，这个过程也极大地锻炼了我。</p>]]></content>
      
      
      <categories>
          
          <category> 实验报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mips微处理器 </tag>
            
            <tag> Verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千灯齐燃驱晦暗，华夏齐心守星河</title>
      <link href="/2020/04/19/qian-deng-qi-ran-qu-hui-an-hua-xia-qi-xin-shou-xing-he/"/>
      <url>/2020/04/19/qian-deng-qi-ran-qu-hui-an-hua-xia-qi-xin-shou-xing-he/</url>
      
        <content type="html"><![CDATA[<p><strong>千灯齐燃驱晦暗，华夏齐心守星河</strong></p><p>我的国家依然是五岳向上，一切江河依然是滚滚向东，民族的意志永远向前。</p><p>——余光中</p><p>​        沉重艰难的呼吸，无处遁形的人们，冰冷攀升的数字，在一片蓝色恐慌中，疫情拉开了2020的序幕，使这个寒冬更加凛冽。</p><p>​        疫情以疯魔般的速度在神州大地上蔓延，丧心病狂地剥夺一条条鲜活的生命。在全国一片人心惶惶的严峻形式之下，党中央及时做出科学决策，精密部署，全国人民万众一心，众志成城，上下联动打响了这场抗疫阻击战。三个余月过后，我们惊讶却又不惊讶地发现作为最先遭受这场全人类浩劫猝不及防袭击的中国，虽然仍不能放松警惕，但是疫情已经得到了有效地控制。惊讶是因为在以美国、意大利为代表的以医疗条件先进标榜的海外国家疫情日益严重，病例数居高不下，而中国在最先遭受疫情袭击，毫无准备且没有任何其他国家经验借鉴的情况下，能够控制住本土的疫情，并且开始向海外伸出援手，不惊讶是因为在这场抗疫阻击战中，我们看到了我们民族的精神一如既往地熠熠发光。</p><p>​        我们看到耄耋老帅，临危受命只为保山河无恙，不惧艰险，驰骋广鄂，担得起时代标榜，称得上国士无双；我们看到替众负薪，将疫情警哨吹响，以生命将这黑夜照亮，不愧白衣如玉，医者轩昂；我们看到桃李年华，挥断青丝，一席白裳，演绎灵魂的红妆；我们看到慈母仙逝，无奈病患生死茫茫，深鞠三躬尽孝意，坚守战场慰天堂；我们看到白头老翁，面对雪虐风饕，也要坚守营帐，用爱筑起安全的屏障；我们看到请战书上一个个伟大的名字，无论生死，不计报酬，白衣之下的那份炎黄血脉滚烫；我们看到各地募捐浩浩汤汤，每一份物资都寄托着明天的向往，青山一道同风雨，明月何曾是两乡，封城隔断的是病毒，隔不断的是爱与希望……</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/img-03b81ae5eecce4915a1fc2ee3964b0a8.jpg" alt="钟南山院士累到列车上睡着"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200419150141.jpg" alt="我们的吹哨人--李文亮医生"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/9e6369d81809ad20c5.jpg" alt="最美光头护士">!</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/19151154.jpg" alt="母亲去世不能奔丧的护士"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200419151149.jpg" alt="冒雪坚守岗位的老大爷"></p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/200419151142.jpg" alt="普洱市人民医院的请战书"></p><p>我们是这样的一个民族，没有“超级英雄”，没有“洛亚方舟”的想象，却相信“愚公移山”，相信“大禹治水”的担当，纵使沧海横流，国难苍茫，凡人之躯也能救黎民于水火，解百姓于倒悬，布衣青衫便是最伟大的力量。我们是这样一个民族，一个“春蚕到死丝方尽，蜡炬成灰泪始干”的民族，纵使疫情难料，局势动荡，也会有人挺身而出，逆行而上，去到最危险也是最需要她们的地方。我们是这样一个民族，一个“一方有难，八方支援”的民族，纵使疫情猖狂，世间沧桑，也有众志成城，守望相帮，携手为我们的祖国保驾护航。这注定是一个将被历史永恒铭记的冬天，铭记住的是新冠肺炎的冷血无情，肆意放荡，编织生离死别的山河之殇；铭记住的是华夏儿女的勠力同心，守望相助，歌颂家国无疆的荡气回肠。我不知道对于这样的民族，有什么困难不可战胜，有什么事情不可想象，过去，民族精神于洪水非典，冰灾地震中为我们坚定信仰，指点方向，而这次也给与了我们不灭的希望和磅礴的力量，让我们看到江城樱花绽放，九州锦绣未央。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/b64e73a346161fb.jpg" alt="美丽江城"></p><p>​    </p><p>​    “历史对于旁观者是一段故事。对于亲历者，却是切身的喜悦和忧伤”。一场疫情，让我们付出了惨重的代价，却也让我们真切地看到了民族的精神和力量，更加坚定地相信我们选择的方向。所谓“或多难以固邦国，或殷忧以启圣明”，灾难并不会轻易地让我们变得强大，可是于灾难间不屈不挠，齐心协力，科研人员不辞辛劳只为揭开病毒的面纱；医护人员不惧危险，用人性的温暖和高明的医术去抵御病毒，去驱散恐慌；工地上，“平地起医楼，当惊世界殊”，工人们再次以“中国速度”震惊世界；口罩工厂日夜加班，让那份关怀始终在流水线上流淌；平常人谨遵叮嘱，闭户不出，做好安全的防护……在这场突如其来的战疫面前，每个人都飞速地成长，做好自己的工作，以爱凝聚，共度时艰。我们能够相信对于经历这场疫情洗礼后的中华民族一定是会更加坚强和更加自信的。</p><p>​        山河已无恙，吾辈当自强。作为青年一辈，我们的征途是星辰大海，肩上扛着祖国未来的希望。我们更应该传承发扬这份精神，努力学好科学文化知识，站好自己的岗位，将自己激昂的青春与民族的梦想相融合，有一份热就去发一份光。</p><p>  最后，愿当晦暗散尽，终星河长明。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抗疫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解LSTM</title>
      <link href="/2020/04/13/li-jie-lstm/"/>
      <url>/2020/04/13/li-jie-lstm/</url>
      
        <content type="html"><![CDATA[<h1 id="理解LSTM"><a href="#理解LSTM" class="headerlink" title="理解LSTM"></a>理解LSTM</h1><p>转载翻译自 <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a> </p><h3 id="循环神经网络（Recurrent-Neural-Networks）"><a href="#循环神经网络（Recurrent-Neural-Networks）" class="headerlink" title="循环神经网络（Recurrent Neural Networks）"></a>循环神经网络（Recurrent Neural Networks）</h3><p>人对一个问题的思考不会完全从头开始。比如你在阅读本片文章的时，你会根据之前理解过的信息来理解下面看到的文字。在理解当前文字的时候，你并不会忘记之前看过的文字，从头思考当前文字的含义。</p><p>传统的神经网络并不能做到这一点，这是在对这种序列信息（如语音）进行预测时的一个缺点。比如你想对电影中的每个片段去做事件分类，传统的神经网络是很难通过利用前面的事件信息来对后面事件进行分类。</p><p>而循环神经网络（下面简称RNNs）可以通过不停的将信息循环操作，保证信息持续存在，从而解决上述问题。RNNs如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-ad37bd8b463c0f00.png" alt></p><p>可以看出A是一组神经网络（可以理解为一个网络的自循环），它的工作是不停的接收<img src="https://math.jianshu.com/math?formula=x_%7Bt%7D" alt="x_{t}">)并且输出<img src="https://math.jianshu.com/math?formula=h_%7Bt%7D" alt="h_{t}">。从图中可以看出A允许将信息不停的再内部循环，这样使得它可以保证每一步的计算都保存以前的信息。</p><p>这样讲可能还是有点晕，更好的理解方式，也是很多文章的做法，将RNNs的自循环结构展开，像是将同一个网络复制并连成一条线的结构，将自身提取的信息传递给下一个继承者，如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-42172a6dae3d3388.png" alt></p><p>这种链式的结构揭示了RNNs与序列和列表类型的数据密切相关。好像他们生来就是为了处理序列类型数据的。</p><p>谁说不是呢！在过去的几年里，RNNs在语音识别、文字建模、翻译、字幕等领域有很成功的应用。在Andrej Karpathy写的博客 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fkarpathy.github.io%2F2015%2F05%2F21%2Frnn-effectiveness%2F" target="_blank" rel="noopener">The Unreasonable Effectiveness of Recurrent Neural Networks</a>中讨论了RNNs取得的惊人成果，这里就不详细讨论了。</p><p>很对成功的案例都有一个共性，就是都用了一种叫LSTMs的特殊的RNNs网络结构。下面就来看看什么是LSTMs。</p><h3 id="长依赖存在的问题"><a href="#长依赖存在的问题" class="headerlink" title="长依赖存在的问题"></a>长依赖存在的问题</h3><p>从之前的描述可以看出来，RNNs理论上是可以将以前的信息与当前的任务进行连接，例如使用以前的视频帧来帮助网络理解当前帧。如果RNNs能做到这一点，那将会是非常的有用。但是他们能做到这点吗？答案是不一定。</p><p>有时候我们需要利用近期的信息来执行来处理当前的任务。例如，考虑用一个语言模型通过利用以前的文字信息来预测下一个文字。如果我们需要预测“the clouds are in the sky”这句话的最后一个字，我们不需要其他的信息，通过前面的语境就能知道最后一个字应该是sky。在这种情况下，相关信息与需要该信息的位置距离较近，RNNs能够学习利用以前的信息来对当前任务进行相应的操作。如下图所示通过输入的<img src="https://math.jianshu.com/math?formula=x_%7B1%7D%E3%80%81x_%7B2%7D" alt="x_{1}、x_{2}">)信息来预测出<img src="https://math.jianshu.com/math?formula=h_%7B3%7D" alt="h_{3}"></p><p><img src="https:////upload-images.jianshu.io/upload_images/6983308-bda6fb8e152bf765.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/972/format/webp" alt></p><p>假设现在有个更为复杂的任务，考虑到下面这句话“I grew up in France… I speak fluent French.”，现在需要语言模型通过现有以前的文字信息预测该句话的最后一个字。通过以前文字语境可以预测出最后一个字是某种语言，但是要猜测出French，要根据之前的France语境。这样的任务，不同之前，因为这次的有用信息与需要进行处理信息的地方之间的距离较远，这样容易导致RNNs不能学习到有用的信息，最终推导的任务可能失败。如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-bc057d1b292d35f6.png" alt></p><p>理论上RNNs是能够处理这种“长依赖”问题的。通过调参来解决这种问题。但是在实践过程中RNNs无法学习到这种特征。<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fpeople.idsia.ch%2F~juergen%2FSeppHochreiter1991ThesisAdvisorSchmidhuber.pdf" target="_blank" rel="noopener">Hochreiter (1991) [German]</a> 和<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww-dsi.ing.unifi.it%2F~paolo%2Fps%2Ftnn-94-gradient.pdf" target="_blank" rel="noopener">Bengio, et al. (1994)</a>深入研究过为什么RNNs没法学习到这种特征。</p><p>幸好LSTMs这种特殊的RNNs是没有这个问题的。</p><h3 id="LSTM-网络"><a href="#LSTM-网络" class="headerlink" title="LSTM 网络"></a>LSTM 网络</h3><p>Long Short Term Memory networks（以下简称LSTMs），一种特殊的RNN网络，该网络设计出来是为了解决长依赖问题。该网络由 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.bioinf.jku.at%2Fpublications%2Folder%2F2604.pdf" target="_blank" rel="noopener">Hochreiter &amp; Schmidhuber (1997)</a>引入，并有许多人对其进行了改进和普及。他们的工作被用来解决了各种各样的问题，直到目前还被广泛应用。</p><p>所有循环神经网络都具有神经网络的重复模块链的形式。 在标准的RNN中，该重复模块将具有非常简单的结构，例如单个tanh层。标准的RNN网络如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-2f0d4a87883d2c8c.png" alt></p><p>LSTMs也具有这种链式结构，但是它的重复单元不同于标准RNN网络里的单元只有一个网络层，它的内部有四个网络层。LSTMs的结构如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-169c41fa64ff202f.png" alt></p><p>在解释LSTMs的详细结构时先定义一下图中各个符号的含义，符号包括下面几种</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-f8c19513a9a46570.png" alt></p><p>图中黄色类似于CNN里的激活函数操作，粉色圆圈表示点操作，单箭头表示数据流向，箭头合并表示向量的合并（concat）操作，箭头分叉表示向量的拷贝操作</p><h3 id="LSTMs的核心思想"><a href="#LSTMs的核心思想" class="headerlink" title="LSTMs的核心思想"></a>LSTMs的核心思想</h3><p>LSTMs的核心是细胞状态，用贯穿细胞的水平线表示。</p><p>细胞状态像传送带一样。它贯穿整个细胞却只有很少的分支，这样能保证信息不变的流过整个RNNs。细胞状态如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-ebff76b101c09b28.png" alt></p><p>LSTM网络能通过一种被称为门的结构对细胞状态进行删除或者添加信息。</p><p>门能够有选择性的决定让哪些信息通过。其实门的结构很简单，就是一个sigmoid层和一个点乘操作的组合。如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-d0c116d9de3d9660.png" alt></p><p>因为sigmoid层的输出是0-1的值，这代表有多少信息能够流过sigmoid层。0表示都不能通过，1表示都能通过。</p><p>一个LSTM里面包含三个门来控制细胞状态。</p><h3 id="一步一步理解LSTM"><a href="#一步一步理解LSTM" class="headerlink" title="一步一步理解LSTM"></a>一步一步理解LSTM</h3><p>前面提到LSTM由三个门来控制细胞状态，这三个门分别称为忘记门、输入门和输出门。下面一个一个的来讲述。</p><p>LSTM的第一步就是决定细胞状态需要丢弃哪些信息。这部分操作是通过一个称为忘记门的sigmoid单元来处理的。它通过查看<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">)和<img src="https://math.jianshu.com/math?formula=x_%7Bt%7D" alt="x_{t}">)信息来输出一个0-1之间的向量，该向量里面的0-1值表示细胞状态<img src="https://math.jianshu.com/math?formula=C_%7Bt-1%7D" alt="C_{t-1}">中的哪些信息保留或丢弃多少。0表示不保留，1表示都保留。忘记门如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-5fb98869b61eced2.png" alt></p><p>下一步是决定给细胞状态添加哪些新的信息。这一步又分为两个步骤，首先，利用<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">)和<img src="https://math.jianshu.com/math?formula=x_%7Bt%7D" alt="x_{t}">)通过一个称为输入门的操作来决定更新哪些信息。然后利用<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">)和<img src="https://math.jianshu.com/math?formula=x_%7Bt%7D" alt="x_{t}">通过一个tanh层得到新的候选细胞信息![\tilde C_{t}](<a href="https://math.jianshu.com/math?formula=\tilde" target="_blank" rel="noopener">https://math.jianshu.com/math?formula=\tilde</a> C_{t})，这些信息可能会被更新到细胞信息中。这两步描述如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-43b42ce338d0566d.png" alt></p><p>下面将更新旧的细胞信息<img src="https://math.jianshu.com/math?formula=C_%7Bt-1%7D" alt="C_{t-1}">)，变为新的细胞信息<img src="https://math.jianshu.com/math?formula=C_%7Bt%7D" alt="C_{t}">。更新的规则就是通过忘记门选择忘记旧细胞信息的一部分，通过输入门选择添加候选细胞信息<img src="https://math.jianshu.com/math?formula=%5Ctilde%20C_%7Bt%7D" alt="\tilde C_{t}">)的一部分得到新的细胞信息<img src="https://math.jianshu.com/math?formula=C_%7Bt%7D" alt="C_{t}">。更新操作如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-cb48d627cc8df11e.png" alt></p><p>更新完细胞状态后需要根据输入的<img src="https://math.jianshu.com/math?formula=h_%7Bt-1%7D" alt="h_{t-1}">)和<img src="https://math.jianshu.com/math?formula=x_%7Bt%7D" alt="x_{t}">来判断输出细胞的哪些状态特征，这里需要将输入经过一个称为输出门的sigmoid层得到判断条件，然后将细胞状态经过tanh层得到一个-1~1之间值的向量，该向量与输出门得到的判断条件相乘就得到了最终该RNN单元的输出。该步骤如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-977224dfe3f34477.png" alt></p><p>还是拿语言模型来举例说明，在预测动词形式的时候，我们需要通过输入的主语是单数还是复数来推断输出门输出的预测动词是单数形式还是复数形式。</p><h3 id="LSTM的变种"><a href="#LSTM的变种" class="headerlink" title="LSTM的变种"></a>LSTM的变种</h3><p>之前描述的LSTM结构是最为普通的。在实际的文章中LSTM的结构存在各种变式，虽然变化都不会太大，但是也值得一提。<br> 其中一个很受欢迎的变式由<a href="https://links.jianshu.com/go?to=ftp%3A%2F%2Fftp.idsia.ch%2Fpub%2Fjuergen%2FTimeCount-IJCNN2000.pdf" target="_blank" rel="noopener">Gers &amp; Schmidhuber (2000)</a>提出，它在LSTM的结构中加入了“peephole connections.”结构，peephole connections结构的作用是允许各个门结构能够看到细胞信息，具体如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-38089213ba42e38e.png" alt></p><p>上图描绘的是所有门都能看到细胞信息，还有一些变式是在其中的某些门引入细胞信息。</p><p>还有一种变式是在忘记门与输入门之间引入一个耦合。不同于之前的LSTM结构，忘记门和输入门是独立的，这个变式是在忘记门删除历史信息的位置加入新的信息，在加入新信息的位置删除旧信息。该结构如下图所示。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-31cce97beb8612f8.png" alt></p><p>一种比其他形式变化更为显著的LSTM变式是由 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1406.1078v3.pdf" target="_blank" rel="noopener">Cho, et al. (2014)</a>提出的门循环单元（GRU）。它将忘记门和输入门合并成一个新的门，称为更新门。GRU还有一个门称为重置门。如下图所示</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/6983308-f3d8a02ed1b8b24d.png" alt></p><p><em>其中重置门为上图中前面那个门，决定了如何将新的输入信息与前面的记忆相结合。更新门为上图中后面那个门，定义了前面记忆保存到当前时间步的量。</em>由于该变式的简单有效，后来被广泛应用。</p><p>这里介绍的只是一些较为有名的LSTM变式，关于LSTM的变式其实还有很多种，像 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1508.03790v2.pdf" target="_blank" rel="noopener">Yao, et al. (2015)</a>提出的Depth Gated RNNs。还有其他用于解决长依赖问题的方法，如由 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1402.3511v1.pdf" target="_blank" rel="noopener">Koutnik, et al. (2014)</a>提出的 Clockwork RNNs。</p><p>至于哪种变式效果最好？各种差异对LSTM的影响有多少？这些问题 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1503.04069.pdf" target="_blank" rel="noopener">Greff, et al. (2015)</a>做了一些对比，结论是他们基本是一样的。 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Fjmlr.org%2Fproceedings%2Fpapers%2Fv37%2Fjozefowicz15.pdf" target="_blank" rel="noopener">Jozefowicz, et al. (2015)</a>测试了一万多种RNN结构，发现在某些指定任务上有些变式还是由于标准LSTMs的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>之前也提到过RNNs取得了不错的成绩，这些成绩很多是基于LSTMs来做的，说明LSTMs适用于大部分的序列场景应用。<br> 一般文章写法会堆一堆公式吓唬人，希望本文一步一步的拆分能有助于大家的理解。<br> LSTMs对于RNNs的使用是一大进步。那么现在还有个问题，是否还有更大的进步？对于很多研究者来说，但是是肯定的，那就是attention的问世。attention的思想是让RNN在每一步挑选信息的时候都能从更大的信息集里面挑选出有用信息。例如，利用RNN模型为一帧图片生成字母，它将会选择图片有用的部分来得到有用的输入，从而生成有效的输出。事实上， <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1502.03044v2.pdf" target="_blank" rel="noopener">Xu, <em>et al.</em>(2015)</a> 已经这么做了，如果你想更深入的了解attention，这会是一个不错的开始。attention方向还有一些振奋人心的研究，但还有很多东西等待探索……</p><p>在RNN领域attention并不是唯一一个可以研究的点。比如<a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1507.01526v1.pdf" target="_blank" rel="noopener">Kalchbrenner, <em>et al.</em> (2015)</a>提出的Grid LSTMs，<a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1502.04623.pdf" target="_blank" rel="noopener">Gregor, <em>et al.</em> (2015)</a>, <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1506.02216v3.pdf" target="_blank" rel="noopener">Chung, <em>et al.</em> (2015)</a>, 和 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Farxiv.org%2Fpdf%2F1411.7610v3.pdf" target="_blank" rel="noopener">Bayer &amp; Osendorfer (2015)</a>将RNNs用于生成模型的研究都非常有意思。<br> 在过去几年RNNs方面的研究非常的多，相信以后的研究成果也会更为丰富。</p>]]></content>
      
      
      <categories>
          
          <category> deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LSTM </tag>
            
            <tag> RNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learning Lightweight Lane Detection CNNs by Self Attention Distillation</title>
      <link href="/2020/04/13/learning-lightweight-lane-detection-cnns-by-self-attention-distillation/"/>
      <url>/2020/04/13/learning-lightweight-lane-detection-cnns-by-self-attention-distillation/</url>
      
        <content type="html"><![CDATA[<h3 id="Learning-Lightweight-Lane-Detection-CNNs-by-Self-Attention-Distillation"><a href="#Learning-Lightweight-Lane-Detection-CNNs-by-Self-Attention-Distillation" class="headerlink" title="Learning Lightweight Lane Detection CNNs by Self Attention Distillation"></a>Learning Lightweight Lane Detection CNNs by Self Attention Distillation</h3><h4 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h4><p>在监督稀疏的情况下训练车道线检测的精确的深度学习模型很难，本文提出了一种叫做自注意蒸馏（Self Attention Distillation）的知识蒸馏方法（knowledge distillation），它使得模型能不借助另外的监督标签下通过自我学习提升。另外发现模型的内部attention maps含有丰富的上下文信息，可以利用这些信息作为监督进行自上而下的逐层attention提取。且容易合并到任何前馈学习的CNN中，不增加inference time,本文的轻量级模型ENet-SAD与当前最先进的模型相比，参数量少20倍，速度快10倍。</p><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>背景</p><p>车道线检测的固有难题</p><ol><li>昏暗的光照条件</li><li>车辆堵塞的情况</li><li>不相关的道路标记</li><li>车道线的细长特性</li></ol><p>其中由于目前车道线检测主要是基于分割任务，但是由于车道线的细长特性，它在一张图片中的有效占比很少（相较于大部分无效的背景），给分割任务带来很大的挑战，一种做法是增加车道线注释的宽度，但它会影响探测性能。</p><p>现有解决方案</p><ol><li><p>多任务学习(MTL）</p></li><li><p>信息传递（MP）</p><p>这两个方案都有代价，MTL需要额外的标注，MP需要增加inference time</p></li></ol><p>本文的方案(SAD)</p><p>优点：不需要额外的标签监督，不增加inference time</p><p>动机：当模型训练到一定水平时，特征图会对车道线的位置和轮廓产生较丰富的信息，见下图中的上半部分。同时也要注意基本episode40k~60k没有太多改进，基本达到饱和。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200404102219.png" alt></p><p>做法：我们使用低层block的attention maps去模仿深层block的attention maps</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200404103709.png" alt></p><p>效果：</p><ul><li>低层的attention maps变得更加精细（保留了更多的原图的一些边缘轮廓信息）</li><li>低层更好的特征表达造福于深层</li></ul><p>我们可以利用SAD训练具有优秀注意力的小网络，并且达到与深度网络匹配的性能。</p><p>贡献</p><ul><li>我们提出了一种新的注意力蒸馏方法，即SAD，以增强基于CNN的车道检测模型的表示学习。SAD只在训练阶段使用，在部署过程中不会带来计算成本，我们的工作是首次尝试使用网络的注意力图作为蒸馏目标。</li><li>我们仔细而系统地研究了SAD的内在机制，考虑在不同层次的模拟路径中进行选择，以及将SAD引入培训过程以提高收益的时间点。</li><li>我们验证了SAD对提高小车道检测网络性能的有用性。</li></ul><h4 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h4><h5 id="知识和注意力蒸馏（Knowledge-and-attention-distillation）"><a href="#知识和注意力蒸馏（Knowledge-and-attention-distillation）" class="headerlink" title="知识和注意力蒸馏（Knowledge and attention distillation）"></a>知识和注意力蒸馏（Knowledge and attention distillation）</h5><p>是一种轻化网络的做法</p><p>通常是一个学生网络向另外一个老师网络学习，通过模仿attention map来训练学生网络，使得小网络具备大网络的性能，相同维度网络间的学习和异构网络间的学习都有对应的研究，我们的方法是在单个网络间进行自上而下的逐层自我学习。需要额外注意的是，这个过程只在训练过程中进行，那么自然不会增加它的inference time（实质上就是将部署到芯片的网络参数变得更加科学，inference步骤都不变）。</p><h4 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h4><h5 id="Self-Attention-Distillation"><a href="#Self-Attention-Distillation" class="headerlink" title="Self Attention Distillation"></a>Self Attention Distillation</h5><p>attention maps分为activation-based attention maps和<br>gradient-based attention maps（二者区别为是否使用激活函数），本文指出基于激活值的attention maps收获更好的表现（另外一种几乎不起作用）</p><h6 id="Activation-based-attention-distillation"><a href="#Activation-based-attention-distillation" class="headerlink" title="Activation-based attention distillation"></a>Activation-based attention distillation</h6><p>实质上是将多通道的3D激活输出压缩转化为2D表达，即（m表示层数）</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200408144546.png" alt></p><p>映射结果中每个元素的绝对值表示此元素对最终输出的重要性 </p><p>文章就此映射尝试了三种方案，如下：</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-ed52d5b5a80b3cf1.png" alt></p><p>实验发现第二种方案更好(第二张与第三种比较明显高激活区域权值更大，而个人感觉第二张与第三张的比较主要是利用平方对小的背景干扰的一个弱化)，并设置p=2</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-d811a46d1c937435.png" alt></p><h6 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h6><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200408154205.png" alt></p><p>网络结构很简单，见上。</p><p>论文中提到了一点改进： 在不增加参数数量的情况下，增加扩容卷积来代替P1中的原来的卷积层，增加网络的接受域。 </p><h6 id="Adding：-SAD-to-training"><a href="#Adding：-SAD-to-training" class="headerlink" title="Adding： SAD to training"></a>Adding： SAD to training</h6><ul><li>ATGEN功能：</li></ul><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200408155210.png" alt></p><p>β是双线性插值（统一尺度），φ是softmax运算（统一量纲）</p><ul><li>蒸馏损失公式</li></ul><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200408155624.png" alt></p><p>$L_d$是$L_2$损失，这里损失是多层的直接求和，可以但没有设立权重参数（估计没太大意义）</p><ul><li>整体损失公式</li></ul><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200408160148.png" alt></p><p> segmentation loss由交叉熵函数和IoU（论文中写的有点奇怪）组成；existence loss为二分类交叉熵函数。 </p><ul><li><p>不太重要的</p><p>模仿的路径多种（类似Densenet）有多种，并且做了有无SVD效果的概率图可视化工作：</p></li></ul><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-2bcfdff91932ed15.png" alt></p><h5 id="Lane-Prediction"><a href="#Lane-Prediction" class="headerlink" title="Lane Prediction"></a>Lane Prediction</h5><p> 对输出的概率图先进行9x9卷积的光滑处理，显示取阈值大于0.5的像素，然后每隔20行取最大响应值，最后三次样条插值连接这些最大响应值。 （不是本文主要工作，写的很简略，具体参考汤晓鸥老师组的X.Pan,J.Shi,P.Luo,X.Wang,andX.Tang.Spatialasdeep: Spatial CNN for traffic scene understanding. In Association for the Advancement of Artificial Intelligence, 2018.）</p><h4 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h4><p>数据集，评价指标，实现细节及结果自见论文</p><h5 id="Ablation-Study"><a href="#Ablation-Study" class="headerlink" title="Ablation Study"></a>Ablation Study</h5><p>SVD路径及方向</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-0212663c622ecbd9.png" alt></p><ul><li>SVD在中高层工作更好</li><li>在低层加入SVD会降低性能，理由：因为网络低层本来是用来捕获细节信息，模仿高层结果会丢失这些信息</li><li>相邻层连接的效果更好，理由：相邻层本身在特征上也要更加相似</li><li>自高向低的模仿路径行不通，理由：低层有很多细节信息(相对于本任务最终输出是噪声信息)</li></ul><h6 id="SVD-VS-深度监督"><a href="#SVD-VS-深度监督" class="headerlink" title="SVD VS 深度监督"></a>SVD VS 深度监督</h6><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-d6da35da1a707c88.png" alt></p><p>深度监督：直接使用标签作为每层的监督</p><p>深度监督可以带来性能的提升，但是比不上SAD</p><h6 id="When-to-add-SAD"><a href="#When-to-add-SAD" class="headerlink" title="When to add SAD"></a>When to add SAD</h6><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/4688102-d699a23400668711.png" alt></p><p>加入SVD的时间点对最终性能影响不大，但是对网络收敛速度有影响，建议在原网络训练后期加入，感觉可能加入SVD网络的学习速率会降低，所以在网络训练差不多完成时加入较好。</p>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SAD </tag>
            
            <tag> automatic drive </tag>
            
            <tag> Lane Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MOTS: Multi-Object Tracking and Segmentation</title>
      <link href="/2020/04/13/mots-multi-object-tracking-and-segmentation/"/>
      <url>/2020/04/13/mots-multi-object-tracking-and-segmentation/</url>
      
        <content type="html"><![CDATA[<h3 id="MOTS-Multi-Object-Tracking-and-Segmentation"><a href="#MOTS-Multi-Object-Tracking-and-Segmentation" class="headerlink" title="MOTS: Multi-Object Tracking and Segmentation"></a>MOTS: Multi-Object Tracking and Segmentation</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p>多目标跟踪很难，bounding_box跟踪性能达到饱和， 进一步的改进需要移动到像素级别。因此，我们建议将检测、分割和跟踪三个任务视为需要一起考虑的相互关联的问题 </p><h5 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a>必要性</h5><p>1.基于bounding_box的跟踪过于粗糙，特别是在目标重叠的情况下，特定目标的边界框中来自其他目标的信息甚至要超过自身的，这种情况下使用分割更加自然，可以提供更多信息给后续过程。</p><p>2.实际可能有多个bounding_box大概都能装下特定目标，容易产生歧义，具体与ground truth进行比较时，还需要额外的匹配程序，而分割产生的掩模可以直接与ground truth。</p><p>因此作者提出来Multi-Object Tracking and Segmentation (MOTS)，并使用TrackR-CNN作为baseline处理MOTS任务，TrackR-CNN扩展了带3D卷积的MaskR-CNN来合并时间信息，并通过一个关联头来链接对象身份随着时间推移。</p><h5 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h5><p>1.为处理MOTS任务制作了KITTI和MOTChallenge两个数据集</p><p>2.提出来针对MOTS任务的评价方法sMOTSA</p><p>3.使用TrackR-CNN作为一种解决检测跟踪和分割的baseline方法，并与现有的工作进行比较</p><p>4.证明了新数据集对像素级多目标跟踪器端到端训练的有效性，证明分割和跟踪联合训练的可能性</p><h4 id="Datasets"><a href="#Datasets" class="headerlink" title="Datasets"></a>Datasets</h4><p> 为视频中每个对象的每一帧注释像素掩码。</p><h5 id="半自动注释的程序"><a href="#半自动注释的程序" class="headerlink" title="半自动注释的程序"></a>半自动注释的程序</h5><p>提出一种通过分割掩码来扩展bounding box级别标注的半自动方法。使用卷积网络DeepLabv3+从bounding box中自动生成分割Mask，然后使用手动多边形标注进行校正。对于每条轨迹，都使用手动标注作为附加训练数据来微调初始网络。一直迭代生成和校正Mask过程,直到达到标注的像素级精度。</p><h5 id="KITTI-MOTS"><a href="#KITTI-MOTS" class="headerlink" title="KITTI MOTS"></a>KITTI MOTS</h5><p>进行上述步骤，并将数据集划分为训练集和验证集，并且进行类平衡，注释过程手动工作比较大，表明基于单张图片的分割技术有限，这也是作者想要在分割模型中融合时间因素的动机。</p><h5 id="MOTSChallenge"><a href="#MOTSChallenge" class="headerlink" title="MOTSChallenge"></a>MOTSChallenge</h5><p> MOTSChallenge主要关注拥挤场景中的行人，由于有很多遮挡的情况，所以非常具有挑战性，像素化的描述尤其有用 </p><h4 id="Evaluation-Measures"><a href="#Evaluation-Measures" class="headerlink" title="Evaluation Measures"></a>Evaluation Measures</h4><p> 要求物体的ground truth掩模和MOTS方法产生的掩模均不重叠 ，即 每个像素只分配给一个object 。</p><p>详见原论文</p><h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><p>TrackR-CNN是在MaskR-CNN的结构基础上做的改进，下图中黄色的部分是前者不同于后者的部分。</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200402144017.png" alt></p><p>TrackR-CNN 通过一个关联头（association head）和两个3D卷积层来扩展Mask R-CNN ，使得可以产生基于时间序列的关联检测，然后将TrackR-CNN的基于掩模探测结果和关联检测结果输入到追踪算法，由算法来根据时序上的关联度将不同帧的探测结果链接起来，得到满足要求的视频多目标追踪输出结果。</p><h5 id="Integrating-temporal-context"><a href="#Integrating-temporal-context" class="headerlink" title="Integrating temporal context"></a>Integrating temporal context</h5><p> 将3D卷积（其中第三个维度是时间）整合到以ResNet-101 为骨干网的Mask R-CNN中 ，网络接收多帧图片输入；  作为替代方案，还考虑卷积LSTM 层（卷积LSTM通过使用卷积而不是矩阵乘积计算其激活来保留输入的空间结构）。 本质上的是为了得到整合了时序信息的增强特征喂给RPN网络。</p><h5 id="Association-Head"><a href="#Association-Head" class="headerlink" title="Association Head"></a>Association Head</h5><p>关联头实质上是一个编码器，由一个全连接层获取区域建议作为输入，编码产生128维的关联向量，以该关联向量代表视频中目标的身份，以属于同一实例的向量彼此接近，属于不同实例的向量彼此远离的原则训练该编码器。  以欧几里德距离定义两个关联向量v和w之间的距离$d(v,w)$ ，即 </p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200402151258.png" alt></p><p>使用batch hard triplet loss 来训练关联头使其适用于视频序列。让D表示视频的检测集。 每个检测$d$ ∈$D$由掩模$mask_d$和关联矢量$a_d$组成，其来自时间帧$t_d$，由与之重叠的ground-truth目标给定对应的ground-truth跟踪id$id_d$ 。 对于T时间步长的视频序列，具有边际α的batch-hard formulation中的关联损失由下式给出 </p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200402151305.png" alt></p><h5 id="Mask-Propagation"><a href="#Mask-Propagation" class="headerlink" title="Mask Propagation"></a>Mask Propagation</h5><p>原文对这一部分的描述略显抽象，我们首先需要弄清什么是光流，实质上它表示因为目标与摄像头的一个相对运动导致同一目标在视频中不同帧的图像中出现的具体坐标区域有差异，而这一部分的工作就是利用光流信息将目标在不同帧图像中的坐标位置差异抹除，然后计算不同帧产生的掩码彼此之间的IOU作为上面关联信息的另一个替代线索，具体做法是</p><p>对于在时间t-1处的检测d∈D具有掩模$mask_d$并且在时间t的检测e∈D处具有掩模$mask_e$我们定义掩模的传播得分为</p><p><img src="https://gitee.com//Riser_Wu/images/raw/master/img/20200402152412.png" alt></p><p>其中W(m)表示原处于t0处的掩模m经过光流信息处理后的对应到t1处新产生的掩模。</p><h5 id="Tracking"><a href="#Tracking" class="headerlink" title="Tracking"></a>Tracking</h5><p>我们需要清楚，TrackR-CNN网络仅仅提供了多目标在不同帧间的掩模探测结果和时序上的关联度信息，接下来需要我们的跟踪算法基于给定的关联度信息链接不同帧的探测结果，然后给出跟踪要求的输出结果。</p><p>实质上还是通过设立关联度阈值来整合单帧探测结果到追踪结果（调参。。），比较重要的是，论文提到了为了使最终的结果不出现目标重叠现象，我们对结果中像素重叠的部分采取探测结果置信度高优先的原则分配重叠的pixels部分</p><h4 id="Experiments-amp-Conclusion"><a href="#Experiments-amp-Conclusion" class="headerlink" title="Experiments&amp;Conclusion"></a>Experiments&amp;Conclusion</h4><p>略</p>]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MOTS </tag>
            
            <tag> video segmentation </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
